<% provide(:title, "知识图谱") %>
<div class="container-fluid-full">
  <div class="row-fluid">
    <%= render 'users/aside' %>
    <div id="content" class="span8">
        <div class="row-fluid">
        <%= render 'layouts/flash' %>
        </div>
        <div class="row-fluid offset1">
            <h1>知识图谱</h1>
            
        </div>
        <div class="row-fluid ">
            <div class="span8">
               <hr style="background-color:grey"/> 
            </div>
        </div>
        
        <div id="myDiagramDiv" style="border: solid 1px black; width:600px; height:600px"></div>
        
        
        <div class="row-fluid ">
            <div class="span8">
               <hr style="background-color:grey"/> 
            </div>
        </div>
        
        <div class="row-fluid ">
            <div class="span8" style="padding-bottom:100px">
              <% if !@interest_arr.blank? %>
              <p>系统根据您最近的学习内容，为您推荐的学习路径是：</p>
                  
              <p style="font-size:1.3em;margin:10px">
                <% if (@interest_arr.size>=2) %>
                  <% @interest_arr[0..-2].each do |course|%>
                    [<%= link_to course.course_name, course%>] ==> 
                  <% end %>
                <% end %>
                [<%= link_to @interest_arr[-1].course_name, @interest_arr[-1]%>]
              </p>
              <% end %>
              <p>
                近期将为您推送相关内容。
              </p>
            </div>
        </div>
    </div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/1.8.21/go-debug.js"></script>
<script id="code">
init();
function init() {
  if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
	var $ = go.GraphObject.make;
	myDiagram =
    $(go.Diagram, "myDiagramDiv",
      {
        initialContentAlignment: go.Spot.Center,
        padding: 10,
        layout: $(go.LayeredDigraphLayout,
                  { direction: 90, layeringOption: go.LayeredDigraphLayout.LayerLongestPathSource }),
        "undoManager.isEnabled": true
      });
	myDiagram.nodeTemplate =
		$(go.Node, go.Panel.Vertical,
      { portId: "", fromLinkable: true, toLinkable: true },
      new go.Binding("visible"),
			$(go.Panel, go.Panel.Auto,
				$(go.Shape,
          { fill: "white", minSize: new go.Size(30, 30), strokeWidth: 0 },
          { cursor: "pointer" },  // indicate that linking may start here
          new go.Binding("fill", "color")),
				$(go.TextBlock,
          { margin: 2 },
          { fromLinkable: false, toLinkable: false },  // don't start drawing a link from the text
          new go.Binding("text", "key"))),
			$("Button",  // a replacement for "TreeExpanderButton" that works for non-tree-structured graphs
        // assume initially not visible because there are no links coming out
        { visible: false },
        // bind the button visibility to whether it's not a leaf node
        new go.Binding("visible", "isTreeLeaf",
                       function(leaf) { return !leaf; })
            .ofObject(),
        $(go.Shape,
          {
            name: "ButtonIcon",
            figure: "MinusLine",
            desiredSize: new go.Size(6, 6)
          },
          new go.Binding("figure", "isCollapsed",  // data.isCollapsed remembers "collapsed" or "expanded"
                         function(collapsed) { return collapsed ? "PlusLine" : "MinusLine"; })),
        {
          click: function(e, obj) {
            e.diagram.startTransaction();
            var node = obj.part;
            if (node.data.isCollapsed) {
              expandFrom(node, node);
            } else {
              collapseFrom(node, node);
            }
            e.diagram.commitTransaction("toggled visibility of dependencies");
          }
        })
    );
	function collapseFrom(node, start) {
	  if (node.data.isCollapsed) return;
	  node.diagram.model.setDataProperty(node.data, "isCollapsed", true);
	  if (node !== start) node.diagram.model.setDataProperty(node.data, "visible", false);
	  node.findNodesOutOf().each(collapseFrom);
	}
	function expandFrom(node, start) {
	  if (!node.data.isCollapsed) return;
	  node.diagram.model.setDataProperty(node.data, "isCollapsed", false);
	  if (node !== start) node.diagram.model.setDataProperty(node.data, "visible", true);
	  node.findNodesOutOf().each(expandFrom);
	}
	myDiagram.linkTemplate =
		$(go.Link,
			{  routing: go.Link.Orthogonal,relinkableFrom: false, relinkableTo: false, corner: 10 },
			$(go.Shape,{ strokeWidth: 2 }),
			$(go.Shape, { strokeWidth: 2, stroke: "#555",toArrow: "OpenTriangle" }));

	myDiagram.model = new go.GraphLinksModel([
	  <% color_arr = ["lightyellow", "lightblue", "orange", "pink", "lightgreen"]%>
	  <% @knowledge_vetex[0..-2].each do |vetex|%>
	    {key: "<%= vetex %>", color: "<%= color_arr[rand(0...color_arr.size)]%>"},
	  <% end %>
	    {key: "<%= @knowledge_vetex[-1] %>", color: "<%= color_arr[rand(0...color_arr.size)]%>"}
    
	], [
	  <% @knowledge_edge[0..-2].each do |edge|%>
	    { from: "<%= edge[0] %>", to: "<%= edge[1] %>" },
	  <% end %>
    { from: "<%= @knowledge_edge[-1][0] %>", to: "<%= @knowledge_edge[-1][1] %>" }
	]);
}
</script>

