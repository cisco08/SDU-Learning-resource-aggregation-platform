{
	"arr" : [
		{

			"title":"Java 语法",
			"content":"\n                    <div class=\"markdown_views\">\n                <blockquote>\n  <p><strong>详细代码请参看</strong> <a href=\"https://github.com/suxue1994/Java_class_code/tree/master/Chapter_02_code\">Java基础语法随堂代码</a></p>\n</blockquote>\n\n\n\n<h2 id=\"关键字掌握\">关键字(掌握)</h2>\n\n\n\n<h3 id=\"定义\">定义</h3>\n\n<pre><code> 被Java语言赋予特定含义的单词\n</code></pre>\n\n\n\n<h3 id=\"特点\">特点：</h3>\n\n<pre><code>    全部小写。\n</code></pre>\n\n\n\n<h3 id=\"注意事项\">注意事项：</h3>\n\n<pre><code>    A:goto和const作为保留字存在。\n    B:类似于Notepad++这样的高级记事本会对关键字有特殊颜色标记\n</code></pre>\n\n\n\n<h2 id=\"标识符掌握\">标识符(掌握)</h2>\n\n\n\n<h3 id=\"定义-1\">定义</h3>\n\n<pre><code>    就是给类，接口，方法，变量等起名字的字符序列\n</code></pre>\n\n\n\n<h3 id=\"组成规则\">组成规则：</h3>\n\n<pre><code>    A:英文大小写字母\n    B:数字\n    C:$和_\n</code></pre>\n\n\n\n<h3 id=\"注意事项-1\">注意事项：</h3>\n\n<pre><code>    A:不能以数字开头\n    B:不能是java中的关键字\n    C:区分大小写\n</code></pre>\n\n\n\n<h3 id=\"常见的命名规则见名知意\">常见的命名规则(见名知意)</h3>\n\n\n\n<h4 id=\"包\">包</h4>\n\n<pre><code>   【全部小写】\n        单级包：小写\n            举例：liuyi,com\n        多级包：小写，并用.隔开\n            举例：cn.itcast,com.baidu              \n</code></pre>\n\n\n\n<h4 id=\"类或者接口\">类或者接口</h4>\n\n<pre><code>        一个单词：首字母大写\n            举例：Student,Demo\n        多个单词：每个单词首字母大写\n            举例：HelloWorld,StudentName\n</code></pre>\n\n\n\n<h4 id=\"方法或者变量\">方法或者变量</h4>\n\n<pre><code>        一个单词：首字母小写\n            举例：name,main\n        多个单词：从第二个单词开始，每个单词首字母大写\n            举例：studentAge,showAllNames()\n</code></pre>\n\n\n\n<h4 id=\"常量\">常量</h4>\n\n<pre><code>        全部大写\n        一个单词：大写\n            举例：PI\n        多个单词：大写，并用_隔开\n            举例：STUDENT_MAX_AGE\n</code></pre>\n\n\n\n<h2 id=\"注释掌握\">注释(掌握)</h2>\n\n\n\n<h3 id=\"定义-2\">定义</h3>\n\n<pre><code>    就是对程序进行解释说明的文字\n</code></pre>\n\n\n\n<h3 id=\"分类\">分类</h3>\n\n<pre><code>    A:单行注释  //\n    B:多行注释  /**/\n    C:文档注释(后面讲) /** */\n</code></pre>\n\n\n\n<h3 id=\"把helloworld案例写了一个带注释的版本\">把HelloWorld案例写了一个带注释的版本。</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs fsharp\">/*\n    需求：我准备写一个java程序，把<span class=\"hljs-string\">\"HelloWorld\"</span>这句话输出在控制台\n\n    分析：\n        A:要写一个Java程序，必须定义类\n        B:把数据能够输出，说明我们的程序是可以独立运行的，而程序要独立运行，必须定义main方法\n        C:把数据输出在控制台，必须使用输出语句\n\n    实现：\n        A:java语言提供了一个关键字：<span class=\"hljs-keyword\">class</span>用来定义类，后面跟的是类名\n        B:main方法的格式是固定的：\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> main(String[] args) {\n\n            }\n        C:输出语句的格式是固定的：\n            System.out.println(<span class=\"hljs-string\">\"HelloWorld\"</span>);\n            <span class=\"hljs-string\">\"HelloWorld\"</span>这个内容是可以改变的\n*/\n\n<span class=\"hljs-comment\">//这是我的HelloWorld案例</span>\n<span class=\"hljs-keyword\">class</span> HelloWorld {\n    /*\n        为了程序能够独立运行，定义main方法\n        main方法是程序的入口\n        被jvm自动调用\n    */\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> main(String[] args) {\n        <span class=\"hljs-comment\">//为了把数据显示在控制台，我们就使用了输出语句</span>\n        System.out.println(<span class=\"hljs-string\">\"HelloWorld\"</span>);\n    }\n}</code></pre>\n\n\n\n<h3 id=\"注释的作用\">注释的作用</h3>\n\n<pre><code>    A:解释说明程序，提高了代码的阅读性。\n    B:可以帮助我们调试程序。\n        后面我们会讲解一个更高端的一个调试工具\n</code></pre>\n\n\n\n<h2 id=\"常量掌握\">常量(掌握)</h2>\n\n\n\n<h3 id=\"定义-3\">定义</h3>\n\n<pre><code>   在程序执行的过程中，其值不发生改变的量\n</code></pre>\n\n\n\n<h3 id=\"分类-1\">分类</h3>\n\n\n\n<h4 id=\"字面值常量\">字面值常量</h4>\n\n<pre><code>    A:字符串常量 \"hello\"        用双引号括起来的内容\n    B:整数常量  12,23          所有的整数\n    C:小数常量  12.345         所有的小数\n    D:字符常量  'a','A','0'    用单引号括起来的内容   \n    E:布尔常量  true,false     比较特殊\n    F:空常量   null(后面讲)    \n</code></pre>\n\n\n\n<h4 id=\"自定义常量后面讲\">自定义常量(后面讲)</h4>\n\n\n\n<h3 id=\"在java中针对整数常量提供了四种表现形式\">在Java中针对整数常量提供了四种表现形式</h3>\n\n<pre><code>    A:二进制   由0，1组成。以0b开头。\n    B:八进制   由0，1，...7组成。以0开头。\n    C:十进制   由0，1，...9组成。整数默认是十进制。\n    D:十六进制  由0，1，...9,a,b,c,d,e,f(大小写均可)组成。以0x开头。\n</code></pre>\n\n\n\n<h2 id=\"进制转换了解\">进制转换(了解)</h2>\n\n\n\n<h3 id=\"不同进制的数据表现\">不同进制的数据表现</h3>\n\n<pre><code>    二进制：由0，1组成。以0b开头。\n    八进制：由0,1,...7组成。以0开头。\n    十进制：由0,1,...9组成。默认整数是十进制。\n    十六进制：由0,1,...9,a,b,c,d,e,f(大小写均可)组成。以0x开头\n</code></pre>\n\n\n\n<h3 id=\"其他进制到十进制\">其他进制到十进制</h3>\n\n<pre><code>    系数：就是每一个位上的数值\n    基数：x进制的基数就是x\n    权：对每一个位上的数据，从右，并且从0开始编号，对应的编号就是该数据的权。\n\n    结果：系数*基数^权次幂之和。\n</code></pre>\n\n\n\n<h3 id=\"十进制到其他进制\">十进制到其他进制</h3>\n\n<pre><code>    除基取余，直到商为0，余数反转。\n</code></pre>\n\n\n\n<h3 id=\"进制转换的快速转换法\">进制转换的快速转换法</h3>\n\n<pre><code>    A:十进制和二进制间的转换\n        8421码。\n    B:二进制到八进制，十六进制的转换 \n</code></pre>\n\n<p>—–下将华丽丽的上图—–</p>\n\n\n\n<h3 id=\"进制概述以及二进制八进制十六进制图解\">进制概述以及二进制,八进制,十六进制图解</h3>\n\n<pre><code>![这里写图片描述](https://img-blog.csdn.net/20170910210023447?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgyMDI2NjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n</code></pre>\n\n\n\n<h3 id=\"快速的进制转换法\">快速的进制转换法</h3>\n\n<pre><code>![这里写图片描述](https://img-blog.csdn.net/20170910210231020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgyMDI2NjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n</code></pre>\n\n\n\n<h3 id=\"任意进制到十进制的转换\">任意进制到十进制的转换</h3>\n\n<pre><code>![这里写图片描述](https://img-blog.csdn.net/20170910210342817?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgyMDI2NjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n</code></pre>\n\n\n\n<h3 id=\"十进制到任意进制的转换\">十进制到任意进制的转换</h3>\n\n<pre><code>![这里写图片描述](https://img-blog.csdn.net/20170910210425706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgyMDI2NjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n</code></pre>\n\n\n\n<h3 id=\"原码反码补码的讲解\">原码反码补码的讲解</h3>\n\n<pre><code>![这里写图片描述](https://img-blog.csdn.net/20170910210456388?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgyMDI2NjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n</code></pre>\n\n\n\n<h3 id=\"有符号数据表示法的练习\">有符号数据表示法的练习</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\"><span class=\"hljs-label\">A:</span>已知某数<span class=\"hljs-built_in\">X</span>的原码为<span class=\"hljs-number\">10110100</span>B，试求<span class=\"hljs-built_in\">X</span>的补码和反码。\n\n            符号位     数值位\n\n    原码: <span class=\"hljs-number\">1</span>           <span class=\"hljs-number\">0110100</span>\n\n    反码： <span class=\"hljs-number\">1</span>           <span class=\"hljs-number\">1001011</span>\n\n    补码： <span class=\"hljs-number\">1</span>           <span class=\"hljs-number\">1001100</span>\n\n    B:已知某数<span class=\"hljs-built_in\">X</span>的补码<span class=\"hljs-number\">11101110</span>B，试求其原码。\n\n            符号位     数值位\n\n    补码： <span class=\"hljs-number\">1</span>           <span class=\"hljs-number\">1101110</span>\n\n    反码： <span class=\"hljs-number\">1</span>           <span class=\"hljs-number\">1101101</span>\n\n    原码： <span class=\"hljs-number\">1</span>           <span class=\"hljs-number\">0010010</span></code></pre>\n\n\n\n<h2 id=\"变量掌握\">变量(掌握)</h2>\n\n\n\n<h3 id=\"定义-4\">定义</h3>\n\n<pre><code>    在程序的执行过程中，其值在某个范围内可以发生改变的量\n</code></pre>\n\n\n\n<h3 id=\"变量的定义格式\">变量的定义格式：</h3>\n\n<pre><code>    A:数据类型 变量名 = 初始化值;\n    B:数据类型 变量名;\n      变量名 = 初始化值;\n</code></pre>\n\n\n\n<h3 id=\"使用变量的时候要注意的问题\">使用变量的时候要注意的问题：</h3>\n\n<pre><code>    A:作用域\n        变量定义在哪个大括号内，它就在这个大括号内有效。\n        并且，在同一个大括号内不能同时定义同名的变量。\n\n    B:初始化值\n        没有初始化值的变量不能直接使用。\n        你只要在使用前给值就行，不一定非要在定义的时候立即给值。\n        推荐在定义的时候给值。\n\n        定义变量的格式：\n            a:数据类型 变量名 = 初始化值;\n            b:数据类型 变量名;\n              变量名 = 初始化值;\n\n    C:在一行上建议只定义一个变量\n        可以定义多个，但是不建议\n</code></pre>\n\n\n\n<h2 id=\"数据类型掌握\">数据类型(掌握)</h2>\n\n\n\n<h3 id=\"定义-5\">定义</h3>\n\n<pre><code>    Java是一种强类型语言，针对每种数据都提供了对应的数据类型。\n</code></pre>\n\n\n\n<h3 id=\"分类-2\">分类：</h3>\n\n<pre><code>    A:基本数据类型：4类8种\n    B:引用数据类型：类，接口，数组。\n</code></pre>\n\n\n\n<h3 id=\"基本数据类型\">基本数据类型</h3>\n\n\n\n<h4 id=\"整数\">整数</h4>\n\n<pre><code>占用字节数\n        byte            1\n        short           2\n        int             4\n        long            8\n</code></pre>\n\n\n\n<h4 id=\"浮点数\">浮点数</h4>\n\n<pre><code>        float           4\n        double          8\n</code></pre>\n\n\n\n<h4 id=\"字符\">字符</h4>\n\n<pre><code>        char            2\n</code></pre>\n\n\n\n<h4 id=\"布尔\">布尔</h4>\n\n<pre><code>        boolean         1\n\n    注意：\n        整数默认是int类型，浮点数默认是double。\n\n        长整数要加L或者l。建议使用L\n        单精度的浮点数要加F或者f。建议使用F\n</code></pre>\n\n\n\n<h2 id=\"数据类型转换掌握\">数据类型转换(掌握)</h2>\n\n\n\n<h3 id=\"boolean类型不参与转换\">boolean类型不参与转换</h3>\n\n\n\n<h3 id=\"默认转换\">默认转换</h3>\n\n<pre><code>    A:从小到大\n    B:byte,short,char -- int -- long -- float -- double\n    C:byte,short,char之间不相互转换，直接转成int类型参与运算。\n</code></pre>\n\n\n\n<h3 id=\"强制转换\">强制转换</h3>\n\n<pre><code>    A:从大到小\n    B:可能会有精度的损失，一般不建议这样使用。\n    C:格式：\n        目标数据类型 变量名 = (目标数据类型) (被转换的数据);\n</code></pre>\n\n\n\n<h3 id=\"思考题和面试题\">思考题和面试题：</h3>\n\n<pre><code>    A:下面两种方式有区别吗?\n</code></pre>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cpp\">            <span class=\"hljs-keyword\">float</span> f1 = <span class=\"hljs-number\">12.345f</span>; <span class=\"hljs-comment\">//表示本身就是一个float数，无精度损失</span>\n            <span class=\"hljs-keyword\">float</span> f2 = (<span class=\"hljs-keyword\">float</span>)<span class=\"hljs-number\">12.345</span>; <span class=\"hljs-comment\">//强制转换，存在精度损失</span></code></pre>\n\n<pre><code>    B:下面的程序有问题吗，如果有，在哪里呢?\n</code></pre>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cs\">            <span class=\"hljs-keyword\">byte</span> b1 = <span class=\"hljs-number\">3</span>;\n            <span class=\"hljs-keyword\">byte</span> b2 = <span class=\"hljs-number\">4</span>;\n            <span class=\"hljs-keyword\">byte</span> b3 = b1 + b2;  <span class=\"hljs-comment\">//存在精度损失，因为计算时先转int型，随后赋值时存在类型降低</span>\n            <span class=\"hljs-keyword\">byte</span> b4 = <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">4</span>;  <span class=\"hljs-comment\">//存在精度损失，因为数字默认int型，随后赋值时存在类型降低</span></code></pre>\n\n<pre><code>    C:下面的操作结果是什么呢?\n\n        byte b = (byte)130;  //-126\n</code></pre>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs mathematica\">    <span class=\"hljs-keyword\">D</span>:字符参与运算\n            是查找ASCII里面的值\n            <span class=\"hljs-string\">'a'</span>     <span class=\"hljs-number\">97</span>\n            <span class=\"hljs-string\">'A'</span>     <span class=\"hljs-number\">65</span>\n            <span class=\"hljs-string\">'0'</span>     <span class=\"hljs-number\">48</span>\n\n\n</code></pre>\n\n<pre><code>        System.out.println('a'); //a\n        System.out.println('a' + 1); //98\n</code></pre>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs mathematica\">    <span class=\"hljs-keyword\">E</span>:字符串参与运算\n            这里其实是字符串的连接\n\n\n</code></pre>\n\n<pre><code>        System.out.println(\"hello\"+'a'+1); //helloa1\n        System.out.println('a'+1+\"hello\"); //98hello\n        System.out.println(\"5+5=\"+5+5); //5+5=55\n        System.out.println(5+5+\"=5+5\"); //10=5+5\n</code></pre>\n\n<p>“`</p>            </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/markdown_views-ea0013b516.css\"/>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"Java变量类型",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                \n<p><span style=\"color:#008000;\">       根据声明方式来为变量分类<br/></span><span style=\"color:#008000;\">             </span>根据声明方式详细来区分，Java的变量有七种,下面的程序代码展示了这七种变量的声明方式：<br/>\n             </p>\n<pre class=\"java\">    Class Myclass {\n                        static int a;\n                        int b;\n                        public static void myMethod(int c)  {\n                              try {\n                        int d;\n                              } catch(Exception e) {\n                           }\n                   }\n                    MyClass(int f) {\n                        int[]g = new int[100];\n                        }\n                     }</pre>\n<p><br/><br/>\n         <span style=\"color:#000000;\">class variable:</span><span style=\"color:#000000;\">声明在class内，method之外，且使用static修饰的变量,例如上面程序代码的a.<br/>\n         </span><span style=\"color:#000000;\">instance variable:</span><span style=\"color:#000000;\">声明在class内，method之外，且未使用static修饰的变量，例如上面程序的b.<br/>\n         </span><span style=\"color:#000000;\">method parameter:</span><span style=\"color:#000000;\">声明在method小括号内的变量，例如上面程序代码的c.<br/>\n         </span><span style=\"color:#000000;\">狭义的局部变量(local variable):</span><span style=\"color:#000000;\">声明在method内的变量，例如上面程序代码的d和g.<br/>\n         </span><span style=\"color:#000000;\">exception-handler parameter:</span><span style=\"color:#000000;\">声明在catch小括号内的变量，例如上面程序代码的e.<br/>\n        </span><span style=\"color:#000000;\"> constructor parameter:</span><span style=\"color:#000000;\">声明在constructor小括号内的变量，例如上面程序代码的f.<br/>\n         </span><span style=\"color:#000000;\">数组元素(array element):</span><span style=\"color:#000000;\">数组的元素值没有识别名称，必须透过数组和索引值(index)来识别.例如上面 程序代码的g[0].<br/>\n         <br/>\n         </span><span style=\"color:#008000;\">根据变量内存来分类<br/>\n             <span style=\"color:#000000;\">根据变量内存位置来区分，Java的变量有两种，包括了:<br/>\n          heap variable:占用的内存在heap中，这类变量包括了class variable,instance variable,array component,<br/>\n          即前面程序的a,b,g[0].这类变量会自动被JVM初始化默认值.<br/>\n          stack variable:通常广义的局部变量(pan-local variable),其占的内存在stack中，这类变量包括了狭义的<br/>\n          局部变量，method parameter,exception-handler parameter,constructor parameter,即前面程序 的c,d,e,f.狭义   的局部变量不会被JVM初始化成默认值，使用者必须自行初始化该变量,但是parameter类(包括method parameter,exception-handler parameter,constructor parameter)会被JVM初始化成传入值.</span></span></p>\n<p><span style=\"color:#008000;\"><span style=\"color:#000000;\"><br/>\n        </span><span style=\"color:#008000;\">根据使用方式来为变量分类<br/>\n            <span style=\"color:#000000;\">根据使用方式，只要分三类即可，分别是:<br/>\n        class variable:即上例的a.<br/>\n        instance variable:即上例的b.<br/>\n        广义的局部变量:包含上例的c,d,e,f.这四者的差别很小，直接归为一类.<br/>\n        至于\"数组元素\"(array component)则不在此三类中，但是\"数组元素\"并不常被注意到，为它多分出一类的用处不大.我通常将数组视为对象,将array component视为对象的instance variable. </span></span></span></p>\n<p><br/></p>\n<p>转自：<a href=\"http://www.blogjava.net/TonyW/archive/2005/06/12/5950.html\">http://www.blogjava.net/TonyW/archive/2005/06/12/5950.html</a></p>\n<div>﻿﻿</div>\n            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"Java串口通信详解】",
			"content":"\n                    <div class=\"markdown_views\">\n                <h2 id=\"序言\">序言</h2>\n\n<p>说到开源，恐怕很少有人不挑大指称赞。学生通过开源代码学到了知识，程序员通过开源类库获得了别人的成功经验及能够按时完成手头的工程，商家通过开源软件赚到了钱……，总之是皆大欢喜。然而开源软件或类库的首要缺点就是大多缺乏详细的说明文档和使用的例子，或者就是软件代码随便你用，就是文档，例子和后期服务收钱。这也难怪，毕竟就像某个著名NBA球员说的那样：“我还要养家，所以千万美元以下的合同别找我谈，否则我宁可待业”。是啊，支持开源的人也要养家，收点钱也不过分。要想既不花钱又学到知识就只能借助网络和了，我只是想抛砖引玉，为开源事业做出点微薄共献，能为你的工程解决哪怕一个小问题，也就足够了。</p>\n\n<p>虽然我的这个系列介绍的东西不是什么Web框架，也不是什么开源服务器，但是我相信，作为一个程序员，什么样的问题都会遇到。有时候越是简单的问题反而越棘手；越是小的地方就越是找不到称手的家伙。只要你不是整天只与“架构”、“构件”、“框架”打交道的话，相信我所说的东西你一定会用到。</p>\n\n\n\n<h2 id=\"1串口通信简介\"><strong>1</strong>．串口通信简介</h2>\n\n<p>嵌入式系统或传感器网络的很多应用和测试都需要通过PC机与嵌入式设备或传感器节点进行通信。其中，最常用的接口就是RS-232串口和并口（鉴于USB接口的复杂性以及不需要很大的数据传输量，USB接口用在这里还是显得过于奢侈，况且目前除了SUN有一个支持USB的包之外，我还没有看到其他直接支持USB的Java类库）。SUN的CommAPI分别提供了对常用的RS232串行端口和IEEE1284并行端口通讯的支持。RS-232-C(又称EIA RS-232-C，以下简称RS232)是在1970年由美国电子工业协会(EIA)联合贝尔系统、调制解调器厂家及计算机终端生产厂家共同制定的用于串行通讯的标准。RS232是一个全双工的通讯协议，它可以同时进行数据接收和发送的工作。</p>\n\n\n\n<h3 id=\"11常见的java串口包\"><strong>1.1</strong>．常见的Java串口包</h3>\n\n<p>目前，常见的Java串口包有SUN在1998年发布的串口通信API：comm2.0.jar（Windows下）、comm3.0.jar（Linux/Solaris）；IBM的串口通信API以及一个开源的实现。鉴于在Windows下SUN的API比较常用以及IBM的实现和SUN的在API层面都是一样的，那个开源的实现又不像两家大厂的产品那样让人放心，这里就只介绍SUN的串口通信API在Windows平台下的使用。</p>\n\n\n\n<h3 id=\"12串口包的安装windows下\"><strong>1.2</strong>．串口包的安装（Windows下）</h3>\n\n<p>到SUN的网站下载javacomm20-win32.zip，包含的东西如下所示： <br/>\n<img src=\"https://img-blog.csdn.net/20150216222501659\" alt=\"这里写图片描述\" title=\"\"/> <br/>\n按照其使用说明（Readme.html）的说法，要想使用串口包进行串口通信，除了设置好环境变量之外，还要将win32com.dll复制到/bin目录下；将comm.jar复制到/lib；把javax.comm.properties也同样拷贝到/lib目录下。然而在真正运行使用串口包的时候，仅作这些是不够的。因为通常当运行“java MyApp”的时候，是由JRE下的虚拟机启动MyApp的。而我们只复制上述文件到JDK相应目录下，所以应用程序将会提示找不到串口。解决这个问题的方法很简单，我们只须将上面提到的文件放到JRE相应的目录下就可以了。</p>\n\n\n\n<h2 id=\"2-串口api概览\"><strong>2</strong>． 串口API概览</h2>\n\n\n\n<h3 id=\"21javaxcommcommport\"><strong>2.1</strong>．javax.comm.CommPort</h3>\n\n<p>这是用于描述一个被底层系统支持的端口的抽象类。它包含一些高层的IO控制方法，这些方法对于所有不同的通讯端口来说是通用的。SerialPort 和ParallelPort都是它的子类，前者用于控制串行端口而后者用于控这并口，二者对于各自底层的物理端口都有不同的控制方法。这里我们只关心SerialPort。</p>\n\n\n\n<h3 id=\"22-javaxcommcommportidentifier\"><strong>2.2</strong>． javax.comm.CommPortIdentifier</h3>\n\n<p>这个类主要用于对串口进行管理和设置，是对串口进行访问控制的核心类。主要包括以下方法</p>\n\n<ul>\n<li>确定是否有可用的通信端口</li>\n<li>为IO操作打开通信端口</li>\n<li>决定端口的所有权</li>\n<li>处理端口所有权的争用</li>\n<li>管理端口所有权变化引发的事件（Event）</li>\n</ul>\n\n\n\n<h2 id=\"23javaxcommserialport\"><strong>2.3</strong>．javax.comm.SerialPort</h2>\n\n<p>这个类用于描述一个RS-232串行通信端口的底层接口，它定义了串口通信所需的最小功能集。通过它，用户可以直接对串口进行读、写及设置工作。</p>\n\n\n\n<h2 id=\"24串口api实例\"><strong>2.4</strong>．串口API实例</h2>\n\n<p>大段的文字怎么也不如一个小例子来的清晰，下面我们就一起看一下串口包自带的例子—SerialDemo中的一小段代码来加深对串口API核心类的使用方法的认识。</p>\n\n\n\n<h3 id=\"241列举出本机所有可用串口\"><strong>2.4.1</strong>．列举出本机所有可用串口</h3>\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">void</span> listPortChoices() {\n            CommPortIdentifier portId;\n            Enumeration en = CommPortIdentifier.getPortIdentifiers();\n            <span class=\"hljs-comment\">// iterate through the ports.</span>\n            <span class=\"hljs-keyword\">while</span> (en.hasMoreElements()) {\n                portId = (CommPortIdentifier) en.nextElement();\n                <span class=\"hljs-keyword\">if</span> (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {\n                    System.out.println(portId.getName());\n                }\n            }\n            portChoice.select(parameters.getPortName());\n        }</code></pre>\n\n<p>以上代码可以列举出当前系统所有可用的串口名称，我的机器上输出的结果是COM1和COM3。</p>\n\n\n\n<h3 id=\"242串口参数的配置\"><strong>2.4.2</strong>．串口参数的配置</h3>\n\n<p>串口一般有如下参数可以在该串口打开以前配置进行配置： <br/>\n<img src=\"https://img-blog.csdn.net/20150216223103832\" alt=\"这里写图片描述\" title=\"\"/> <br/>\n包括波特率，输入/输出流控制，数据位数，停止位和齐偶校验。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">SerialPort sPort;\n<span class=\"hljs-keyword\">try</span> {            sPort.setSerialPortParams(BaudRate,Databits,Stopbits,Parity);\n                     <span class=\"hljs-comment\">//设置输入/输出控制流                     sPort.setFlowControlMode(FlowControlIn | FlowControlOut);</span>\n        } <span class=\"hljs-keyword\">catch</span> (UnsupportedCommOperationException e) {\n        }</code></pre>\n\n\n\n<h3 id=\"243串口的读写\"><strong>2.4.3</strong>．串口的读写</h3>\n\n<p>对串口读写之前需要先打开一个串口：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">CommPortIdentifier portId = CommPortIdentifier.getPortIdentifier(PortName);\n<span class=\"hljs-keyword\">try</span> {\n            SerialPort  sPort = (SerialPort) portId.open(<span class=\"hljs-string\">\"串口所有者名称\"</span>, 超时等待时间);\n        } <span class=\"hljs-keyword\">catch</span> (PortInUseException e) {<span class=\"hljs-comment\">//如果端口被占用就抛出这个异常</span>\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> SerialConnectionException(e.getMessage());\n        }\n<span class=\"hljs-comment\">//用于对串口写数据</span>\nOutputStream os = <span class=\"hljs-keyword\">new</span> BufferedOutputStream(sPort.getOutputStream());\nos.write(<span class=\"hljs-keyword\">int</span> data);\n<span class=\"hljs-comment\">//用于从串口读数据</span>\nInputStream is = <span class=\"hljs-keyword\">new</span> BufferedInputStream(sPort.getInputStream());\n<span class=\"hljs-keyword\">int</span> receivedData = is.read();</code></pre>\n\n<p>读出来的是int型，你可以把它转换成需要的其他类型。 <br/>\n这里要注意的是，由于Java语言没有无符号类型，即所有的类型都是带符号的，在由byte到int的时候应该尤其注意。因为如果byte的最高位是1，则转成int类型时将用1来占位。这样，原本是10000000的byte类型的数变成int型就成了1111111110000000，这是很严重的问题，应该注意避免。</p>\n\n<h2 id=\"3串口通信的通用模式及其问题\"><strong>3</strong>．串口通信的通用模式及其问题</h2>\n\n<p>终于唠叨完我最讨厌的基础知识了，下面开始我们本次的重点–串口应用的研究。由于向串口写数据很简单，所以这里我们只关注于从串口读数据的情况。通常，串口通信应用程序有两种模式，一种是实现SerialPortEventListener接口，监听各种串口事件并作相应处理；另一种就是建立一个独立的接收线程专门负责数据的接收。由于这两种方法在某些情况下存在很严重的问题（至于什么问题这里先卖个关子J），所以我的实现是采用第三种方法来解决这个问题。</p>\n\n<h2 id=\"31事件监听模型\"><strong>3.1</strong>．事件监听模型</h2>\n\n<p>现在我们来看看事件监听模型是如何运作的：</p>\n\n<ul>\n<li>首先需要在你的端口控制类（例如SManager）加上“implements SerialPortEventListener”</li>\n<li>在初始化时加入如下代码：</li>\n</ul>\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">try</span> {\n            SerialPort sPort.addEventListener(SManager);\n        } <span class=\"hljs-keyword\">catch</span> (TooManyListenersException e) {\n            sPort.close();\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> SerialConnectionException(<span class=\"hljs-string\">\"too many listeners added\"</span>);\n        }\n        sPort.notifyOnDataAvailable(<span class=\"hljs-keyword\">true</span>);</code></pre>\n\n<ul>\n<li>覆写public void serialEvent(SerialPortEvent e)方法，在其中对如下事件进行判断： <br/>\n　　BI -通讯中断. <br/>\n　　CD -载波检测. <br/>\n　　CTS -清除发送. <br/>\n　　DATA_AVAILABLE -有数据到达. <br/>\n　　DSR -数据设备准备好. <br/>\n　　FE -帧错误. <br/>\n　　OE -溢位错误. <br/>\n　　OUTPUT_BUFFER_EMPTY -输出缓冲区已清空. <br/>\n　　PE -奇偶校验错. <br/>\n　　RI -　振铃指示.</li>\n</ul>\n\n<p>一般最常用的就是DATA_AVAILABLE–串口有数据到达事件。也就是说当串口有数据到达时，你可以在serialEvent中接收并处理所收到的数据。然而在我的实践中，遇到了一个十分严重的问题。 <br/>\n首先描述一下我的实验：我的应用程序需要接收传感器节点从串口发回的查询数据，并将结果以图标的形式显示出来。串口设定的波特率是115200，川口每隔128毫秒返回一组数据（大约是30字节左右），周期（即持续时间）为31秒。实测的时候在一个周期内应该返回4900多个字节，而用事件监听模型我最多只能收到不到1500字节，不知道这些字节都跑哪里去了，也不清楚到底丢失的是那部分数据。值得注意的是，这是我将serialEvent()中所有处理代码都注掉，只剩下打印代码所得的结果。数据丢失的如此严重是我所不能忍受的，于是我决定采用其他方法。</p>\n\n<h3 id=\"32串口读数据的线程模型\"><strong>3.2</strong>．串口读数据的线程模型</h3>\n\n<p>这个模型顾名思义，就是将接收数据的操作写成一个线程的形式:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">startReadingDataThread</span>() {\n        Thread readDataProcess = <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> Runnable() {\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>() {\n                            <span class=\"hljs-keyword\">while</span> (newData != -<span class=\"hljs-number\">1</span>) {\n                    <span class=\"hljs-keyword\">try</span> {\n                                          newData = is.read();\n                        System.out.println(newData);\n                                          <span class=\"hljs-comment\">//其他的处理过程</span>\n                                          ……….\n                                   } <span class=\"hljs-keyword\">catch</span> (IOException ex) {\n                        System.err.println(ex);\n                        <span class=\"hljs-keyword\">return</span>;\n                    }\n                     }\n              readDataProcess.start();\n}</code></pre>\n\n<p>在我的应用程序中，我将收到的数据打包放到一个缓存中，然后启动另一个线程从缓存中获取并处理数据。两个线程以生产者—消费者模式协同工作，数据的流向如下图所示： <br/>\n<img src=\"https://img-blog.csdn.net/20150216223828869\" alt=\"这里写图片描述\" title=\"\"/> <br/>\n这样，我就圆满解决了丢数据问题。然而，没高兴多久我就又发现了一个同样严重的问题：虽然这回不再丢数据了，可是原本一个周期（31秒）之后，传感器节电已经停止传送数据了，但我的串口线程依然在努力的执行读串口操作，在控制台也可以看见收到的数据仍在不断的打印。原来，由于传感器节点发送的数据过快，而我的接收线程处理不过来，所以InputStream就先把已到达却还没处理的字节缓存起来，于是就导致了明明传感器节点已经不再发数据了，而控制台却还能看见数据不断打印这一奇怪的现象。唯一值得庆幸的是最后收到数据确实是4900左右字节，没出现丢失现象。然而当处理完最后一个数据的时候已经快1分半钟了，这个时间远远大于节点运行周期。这一延迟对于一个实时的显示系统来说简直是灾难！ <br/>\n后来我想，是不是由于两个线程之间的同步和通信导致了数据接收缓慢呢？于是我在接收线程的代码中去掉了所有处理代码，仅保留打印收到数据的语句，结果依然如故。看来并不是线程间的通信阻碍了数据的接收速度，而是用线程模型导致了对于发送端数据发送速率过快的情况下的数据接收延迟。这里申明一点，就是对于数据发送速率不是如此快的情况下前面者两种模型应该还是好用的，只是特殊情况还是应该特殊处理。</p>\n\n\n\n<h3 id=\"33第三种方法\"><strong>3.3</strong>．第三种方法</h3>\n\n<p>痛苦了许久（Boss天天催我L）之后，偶然的机会，我听说TinyOS中（又是开源的）有一部分是和我的应用程序类似的串口通信部分，于是我下载了它的1.x版的Java代码部分，参考了它的处理方法。解决问题的方法说穿了其实很简单，就是从根源入手。根源不就是接收线程导致的吗，那好，我就干脆取消接收线程和作为中介的共享缓存，而直接在处理线程中调用串口读数据的方法来解决问题（什么，为什么不把处理线程也一并取消？—-都取消应用程序界面不就锁死了吗？所以必须保留）于是程序变成了这样：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">byte</span>[] <span class=\"hljs-title\">getPack</span>(){\n       <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n                       <span class=\"hljs-comment\">// PacketLength为数据包长度</span>\n                    <span class=\"hljs-keyword\">byte</span>[] msgPack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[PacketLength];\n                    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; PacketLength; i++){\n                        <span class=\"hljs-keyword\">if</span>( (newData = is.read()) != -<span class=\"hljs-number\">1</span>){\n                            msgPack[i] = (<span class=\"hljs-keyword\">byte</span>) newData;\n                            System.out.println(msgPack[i]);\n                        }\n                    }\n                    <span class=\"hljs-keyword\">return</span> msgPack;\n                            }\n}</code></pre>\n\n<p>在处理线程中调用这个方法返回所需要的数据序列并处理之，这样不但没有丢失数据的现象行出现，也没有数据接收延迟了。这里唯一需要注意的就是当串口停止发送数据或没有数据的时候is.read()一直都返回-1，如果一旦在开始接收数据的时候发现-1就不要理它，继续接收，直到收到真正的数据为止。</p>            </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/markdown_views-ea0013b516.css\"/>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"JAVA的名词释义",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                JDK : Java Development Toolkit (java 开发工具包)。\n<p style=\"margin-left:30px;\">         JDK是整个JAVA的核心,包括了java运行环境（Java Runtime Envirnmet），一堆java工具（javac、java，jdb等）和java基础的类库（即 java API 包括rt.jar）</p>\n<p style=\"margin-left:30px;\">JRE: java运行环境（Java Runtime Envirnmet）</p>\n<p style=\"margin-left:30px;\">JVM:是JRE 的一部分，是java虚拟机。</p>            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"Java EE基础知识1",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                \n<p><span style=\"font-size:18px;\">一、Java EE规范及发展历史</span></p>\n<p><span style=\"font-size:18px;\"/></p>\n<p><span style=\"color:#002060;\">       Java</span><span style=\"color:#002060;\">平台的三种版本</span></p>\n<div><span style=\"color:#28BFEE;\"/><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span><span style=\"font-size:18px;\"><span style=\"color:#002060;\">       </span>\n</span>1、<span style=\"color:#002060;\">Java SE</span><span style=\"color:#002060;\">（</span><span style=\"color:#002060;\">Java\n</span><span style=\"color:#FF0000;\">S</span><span style=\"color:#002060;\">tandard </span>\n<span style=\"color:#FF0000;\">E</span><span style=\"color:#002060;\">dition</span><span style=\"color:#002060;\">）</span></div>\n<div><span style=\"color:#28BFEE;\"/><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span><span style=\"font-size:18px;\"><span style=\"color:#002060;\">       </span>\n</span>2、<span style=\"color:#002060;\">Java ME</span><span style=\"color:#002060;\"> （</span><span style=\"color:#002060;\">Java\n</span><span style=\"color:#FF0000;\">M</span><span style=\"color:#002060;\">icro </span><span style=\"color:#FF0000;\">E</span><span style=\"color:#002060;\">dition</span><span style=\"color:#002060;\">）</span></div>\n<div><span style=\"color:#28BFEE;\"/><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span><span style=\"font-size:18px;\"><span style=\"color:#002060;\">       </span>\n</span>3、<span style=\"color:#002060;\">Java EE</span><span style=\"color:#002060;\"> （</span><span style=\"color:#002060;\">Java\n</span><span style=\"color:#FF0000;\">E</span><span style=\"color:#002060;\">nterprise </span>\n<span style=\"color:#FF0000;\">E</span><span style=\"color:#002060;\">dition</span><span style=\"color:#002060;\">）<br/><br/>\n二、<span style=\"color:#000000;\">Java EE的角色<br/></span></span>\n<div><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span>1、</span><span style=\"color:#002060;\">JavaEE</span><span style=\"color:#002060;\">Product</span><span style=\"color:#002060;\">：</span><span style=\"color:#002060;\">即实现了</span><span style=\"color:#002060;\">Java EE</span><span style=\"color:#002060;\">技术规范的厂商\n</span></div>\n<div><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span>2、</span><span style=\"color:#002060;\">Application Component Provider</span></div>\n<div><span style=\"color:#49CACD;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span><span style=\"font-size:18px;\"><span style=\"color:#002060;\">       </span>\n</span></span><span style=\"color:#002060;\">企业</span><span style=\"color:#002060;\">Bean</span><span style=\"color:#002060;\">开发者</span></div>\n<div><span style=\"color:#49CACD;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span><span style=\"font-size:18px;\"><span style=\"color:#002060;\">       </span>\n</span></span><span style=\"color:#002060;\">Web</span><span style=\"color:#002060;\">组件开发者\n</span></div>\n<div><span style=\"color:#49CACD;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span><span style=\"font-size:18px;\"><span style=\"color:#002060;\">       </span>\n</span></span><span style=\"color:#002060;\">应用客户端开发者 </span></div>\n<div><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span>3、</span><span style=\"color:#002060;\">Application Assembler</span><span style=\"color:#002060;\">（打包</span><span style=\"color:#002060;\">.ear</span><span style=\"color:#002060;\">）</span></div>\n<div><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span>4、</span><span style=\"color:#002060;\">Deployer</span></div>\n<div><span style=\"color:#28BFEE;\"/><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span>5、<span style=\"color:#002060;\">System Administrator</span></div>\n<div><span style=\"color:#28BFEE;\"/><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span>6、<span style=\"color:#002060;\">Tool Provider：</span><span style=\"color:#002060;\">即工具厂商，比如开发、打包、装配以及部署工具的提供<br/><br/>\n三<span style=\"color:#000000;\">、EJB的概念<br/></span></span>\n<div><span style=\"color:#28BFEE;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">的产生：</span></div>\n<div><span style=\"color:#49CACD;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font><span style=\"color:#002060;\">服务器端构件开发很困难（多用户、多线程和事务处理等）</span></div>\n<div><span style=\"color:#49CACD;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font><span style=\"color:#002060;\">1998</span><span style=\"color:#002060;\">年</span><span style=\"color:#002060;\">3</span><span style=\"color:#002060;\">月召开的</span><span style=\"color:#002060;\">JavaOne98</span><span style=\"color:#002060;\">开发者大会上，</span><span style=\"color:#002060;\">SUN</span><span style=\"color:#002060;\">公司正式发布了</span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">版规范（</span><span style=\"color:#002060;\">Enterprise\n</span><span style=\"color:#002060;\">JavaBean</span><span style=\"color:#002060;\"> 1.0</span><span style=\"color:#002060;\">）<br/><br/></span>\n<div><span style=\"color:#28BFEE;\">四、</span><span style=\"color:#002060;\">什么是</span><span style=\"color:#002060;\">EJB</span></div>\n<div><span style=\"color:#49CACD;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font>1、<span style=\"color:#002060;\">EJB\n</span><span style=\"color:#002060;\">（</span><span style=\"color:#002060;\">Enterprise Beans</span><span style=\"color:#002060;\">）是基于分布式事务处理的企业级应用程序的组件。</span></div>\n<div><span style=\"color:#49CACD;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font>2、<span style=\"color:#002060;\">Sun</span><span style=\"color:#002060;\">公司对</span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">规范的定义：\n</span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">是用于开发和部署基于组件的、多层结构的、分布式的、面向对象的</span><span style=\"color:#002060;\">Java</span><span style=\"color:#002060;\">商业应用系统的跨平台的一种组件架构。</span></div>\n<div><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font>3、</font><span style=\"color:#002060;\">用</span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">架构开发的应用程序是可伸缩的、事务性的、多用户安全的。这些应用程序可能只需要编写一次，就可以在</span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">规范的任何服务器上部署。<br/><br/>\n五<span style=\"color:#000000;\">、EJB的意义<br/></span></span>\n<div><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">用来干什么的？</span></div>\n<div><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">       </span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">实际上是用于编写</span><span style=\"color:#002060;\">业务层代码</span><span style=\"color:#002060;\">。对于一个基于</span><span style=\"color:#002060;\">MVC</span><span style=\"color:#002060;\">结构的应用，应包含显示层、控制层和业务层</span><span style=\"color:#002060;\">,\n</span><span style=\"color:#002060;\">假设我们采用</span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">开发基于</span><span style=\"color:#002060;\">MVC</span><span style=\"color:#002060;\">结构的应用，那么</span><span style=\"color:#002060;\">ejb</span><span style=\"color:#002060;\">就是用于开发应用的业务层。<br/><br/></span>\n<div><span style=\"color:#28BFEE;\"><span style=\"color:#002060;\">六、</span></span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">的意义</span></div>\n<div><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>1、</font><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">为我们提供了很多在企业开发中需要使用到的服务，如事务管理、安全、持久化、分布式等，因为这些服务由服务器提供，无需我们自行开发，这样大大减少了我们的开发工作量。</span></div>\n<div><span style=\"color:#49CACD;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>2、<span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">是一种可以快速开发大规模企业应用的组件体系结构，它让应用开发者可以集中精力去开发解决各种复杂业务逻辑问题，而不用花费精力来处理分布式服务器、远程调用等底层技术。</span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">模型可以让开发者避免底层功能的重复开发，从而提高开发效率。<br/><br/>\n七、<span style=\"color:#002060;\">以</span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">为核心的应用程序结构</span><br/><img src=\"https://img-blog.csdn.net/20161113152747101?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" width=\"547\" height=\"289\" alt=\"\"/><br/><br/></span>\n<div><span style=\"color:#28BFEE;\"><span style=\"color:#002060;\">八、</span></span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">的应用场景</span></div>\n<div><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>1、</font><span style=\"color:#002060;\">应用的规模较大，而且增长速度快速。</span></div>\n<div><span style=\"color:#49CACD;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>2、<span style=\"color:#002060;\">应用的伸缩性要求很高。（分布式支持）</span></div>\n<div><span style=\"color:#49CACD;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>3、<span style=\"color:#002060;\">应用要求支持不同类型的客户端。</span></div>\n<div><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>4、</font><span style=\"color:#002060;\">应用要求采用标准技术。（</span><span style=\"color:#002060;\">EJB</span><span style=\"color:#002060;\">是规范中的标准技术）<br/><br/><span style=\"color:#000000;\">九、EJB3的分类<br/></span></span>\n<div><span style=\"color:#28BFEE;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>1、<span style=\"color:#002060;\">会话</span><span style=\"color:#002060;\">Bean(SessionBean)</span></div>\n<div><span style=\"color:#49CACD;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><span style=\"color:#002060;\">代表一个可处理应用中业务逻辑的完整组件，主要包含了各种业务逻辑的实现代码。也就是是编写业务逻辑的地方。</span></div>\n<div><span style=\"color:#28BFEE;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>2、<span style=\"color:#002060;\">消息驱动</span><span style=\"color:#002060;\">Bean(</span><span style=\"color:#002060;\">Message-Driven\n Bean</span><span style=\"color:#002060;\">，简称</span><span style=\"color:#002060;\">MDB</span><span style=\"color:#002060;\">)</span></div>\n<div><span style=\"color:#49CACD;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><span style=\"color:#002060;\">专门用于异步处理</span><span style=\"color:#002060;\">java</span><span style=\"color:#002060;\">消息的组件，具有处理大量并发消息的能力。它是由无状态</span><span style=\"color:#002060;\">Session\n Bean</span><span style=\"color:#002060;\">发展而来，用作</span><span style=\"color:#002060;\">JMS</span><span style=\"color:#002060;\">消息的异步消费者。</span></div>\n<div><span style=\"color:#28BFEE;\"/><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font>3、<span style=\"color:#002060;\">JPA（Java</span><span style=\"color:#002060;\">Persistence\n API）</span></div>\n<div><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><span style=\"color:#002060;\">主要是为了简化现有的持久化开发工作和整合</span><span style=\"color:#002060;\">ORM</span><span style=\"color:#002060;\">技术</span></div>\n<div><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#28BFEE\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#49CACD\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><font color=\"#002060\"><font color=\"#000000\"><font size=\"4\"><font color=\"#002060\"><font color=\"#000000\"><span style=\"color:#28BFEE;\"><span style=\"font-size:18px;\"><span style=\"color:#002060;\">      \n</span></span></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font><span style=\"color:#002060;\">实体</span><span style=\"color:#002060;\">Bean</span><span style=\"color:#002060;\">（</span><span style=\"color:#002060;\">Entity\n Bean）</span></div>\n<br/></div>\n<span style=\"color:#002060;\"/></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<span style=\"font-size:18px;\"><br/></span>\n            </div>\n                ",
			"keywords":["programing"]
		},
		
		{

			"title":"JVM——结构（小结）",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                \n<h1>\n</h1><p><span style=\"line-height:25px;\"><span style=\"font-family:SimSun;font-size:13px;\">Java体系：</span></span></p>\n<p><span style=\"line-height:25px;font-weight:normal;\"><span style=\"font-family:SimSun;font-size:13px;\">    JDK（Java development Kit）包括：java程序设计语言，java虚拟机，java API类库。如图：<br/></span></span></p>\n<p><span style=\"line-height:25px;font-weight:normal;\"><span style=\"font-family:SimSun;font-size:13px;\"><img src=\"http://hi.csdn.net/attachment/201111/8/0_132072628200NW.gif\" width=\"700\" height=\"342\" alt=\"\"/><br/></span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"line-height:25px;font-weight:normal;\">   Java技术体系：Java Card（Applets），Java ME(Micro Edition)，Java SE（Standard Edition），Java EE（Enterprise Edition）。<br/></span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"line-height:25px;\">Jvm结构概念:<br/></span><span style=\"font-weight:normal;line-height:25px;\">   <img src=\"http://hi.csdn.net/attachment/201111/8/0_13207288278zdw.gif\" alt=\"\" width=\"700\" height=\"400\"/><br/></span><span style=\"font-weight:normal;line-height:25px;\"><span><span style=\"background-color:rgb(255,255,255);\">   <br/></span></span></span><span style=\"font-weight:normal;color:rgb(51,51,255);\">运行时数据区域（Runtime Data Areas）</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;\">    Jvm定义了一组运行时数据区域,这些区域在Jvm运行程序时使用。一些区域在JVM启动的时候就被创建，在JVM关闭时销毁。还有些区域是每个线程所有的。线</span></span><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">程启动时创建，线程结束时销毁。</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;background-color:rgb(255,255,255);\"><span style=\"color:#3333ff;\">pc 寄存器（Program Counter Register）</span></span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;\">    JVM支持多线程,每个线程都有自己的pc寄存器。如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址，如果是</span></span><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">native的，这个计数器值则为空（Undefined）。</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;color:rgb(51,51,255);\">Jvm栈</span><br/><span style=\"font-weight:normal;\">    虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表，操作栈，动态链接，方</span></span><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;\">法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈道出栈的过程。</span></span><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">栈的局部变量主要存放一些基本类型的变量（int,</span><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">short,\n long, byte, float, double, boolean, char）,对象句柄（reference类型）和returnAddress类型。</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"color:#3333ff;\">本地方法栈(Native Method Stacks)</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">   本地方法栈于虚拟机栈所发挥的作用非常相似，区别是虚拟机栈为虚拟机执行Java方法服务，本地方法栈则是为虚拟机使用到的Native方法服务。</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"color:#3333ff;\">Java堆（Heap）</span><br/>\n   Jvm有一个堆，所有Jvm中的线程共享这个堆。所有的类对象实例和数组都分配在堆上。Jvm堆在Jvm启动的时候被创建。Jvm提供一个垃圾收集者来管理堆。堆</span><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">上的对象不需要程序员显式地销毁。堆可以是固定大小，也可以根据需要增加大小。堆可以是不连续的。</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"color:#3333ff;\">方法区域（Method Area）</span><br/>\n    所有Jvm中的线程共享这个区域,它用于存储已被虚拟机加载的类信息，常量，静态变量，即使编译器编译后的代码等数据。</span></p>\n<p><span style=\"font-family:SimSun;font-weight:normal;font-size:13px;\"><span style=\"color:#3333ff;\">运行时常量池（Runtime Constant Pool）</span></span></p>\n<p><span style=\"font-family:SimSun;font-weight:normal;font-size:13px;\">    运行时常量池是方法区的一部分。Class文件中除了有类的版本，字段，方法，接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面</span><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池。</span></p>\n<p><span style=\"font-family:SimSun;font-weight:normal;font-size:13px;\"><br/></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><strong>Jvm结构</strong>说明：</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">    1.</span><span style=\"font-family:SimSun;font-size:13px;\">每个Java虚拟机实例都有一个方法区以及一个堆</span><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">，它们是由该虚拟机实例中所有线程共享的。</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><img src=\"http://hi.csdn.net/attachment/201202/25/0_1330170872aMS8.gif\" width=\"500\" height=\"400\" alt=\"\"/></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">    2.</span><span style=\"font-family:SimSun;font-size:13px;\">每个线程被创建时，都将得到自己的PC寄存器以及一个Java栈。<span style=\"font-weight:normal;\">任何线程都不能访问另一个线程的PC寄存器或者Java栈。</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><img src=\"http://hi.csdn.net/attachment/201202/25/0_1330171746srU2.gif\" width=\"700\" height=\"500\" alt=\"\"/><br/></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;\">   3.数据类型：基本类型和引用类型：</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;\"><img src=\"http://hi.csdn.net/attachment/201202/25/0_1330174024A33i.gif\" alt=\"\" width=\"639\" height=\"520\"/><br/></span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;\">    4.方法区：</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"white-space:pre;\"/>1）对方法区数据的访问是线程安全的。</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"white-space:pre;\"/>2）方法区的大小不必是固定的，虚拟机可以根据应用的需要动态调整。方法区也不必是连续的，方法区可以在一个堆（甚至是虚拟机自己的堆）中自由</span><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">分配。虚拟机允许用户或者程序员指定方法区的初始大小以及最小和最大尺寸等。</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"white-space:pre;\"/>3）方法区也可以被垃圾回收。</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"white-space:pre;\"/>4）方法区中储存的信息：</span></p>\n\n<ul><li><ul><li><span style=\"font-family:SimSun;font-size:13px;\">这个类型的全限定名。</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">这个类型的直接超类的全限定名（除非这个类是java.lang.Object，它没有超类）</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">这个类型是类类型还是接口类型。</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">这个类型的访问修饰符（public,abstract或final的某个子集）</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">任何直接超接口的全限定名的有序列表。</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">该类型的常量池。</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">字段信息。</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">方法信息。</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">除了常量以外的所有类（静态）变量。</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">一个到类ClassLoader的引用。</span></li><li><span style=\"font-family:SimSun;font-size:13px;\">一个到Class类的引用。</span></li></ul></li></ul><h1>\n</h1><p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"white-space:pre;\"><span style=\"font-family:SimSun;font-size:13px;\">5.执行引擎</span></span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;white-space:pre;\"><span style=\"white-space:pre;\"/>1）运行中Java程序的每一个线程都是一个独立的虚拟机执行引擎的实例。</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;white-space:pre;\"><span style=\"white-space:pre;\"/>2）JVM的指令集以栈为中心，而非以寄存器为中心，使得在那些只有很少的寄存器，或者寄存器很没有规律的机器上实现Java更便利。</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;white-space:pre;\"><br/></span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\">PS：</span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;\">    1.Class类使得运行程序可以访问方法区中保存的信息（及反射的原理）。</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;\"><span style=\"font-weight:normal;\">    2.数组是真正的对象，和其他对象一样，数组总是存储在堆中。</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"line-height:25px;\"><br/></span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"line-height:25px;\">参考资料：<br/></span><span style=\"line-height:25px;\">《深入理解java虚拟机》</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"line-height:25px;\">《深入Java虚拟机》</span></span></p>\n<p><span style=\"font-family:SimSun;font-size:13px;font-weight:normal;\"><span style=\"line-height:25px;\"><span style=\"background-color:rgb(255,255,255);\"><span style=\"font-family:Tahoma, Arial, Helvetica, sans-serif;font-size:14px;line-height:18px;\">转载请注明出处：</span><a title=\"view: Nagle算法和Delayed ACK的一个测试\" href=\"http://www.blogjava.net/killme2008/archive/2011/06/archive/2011/06/30/353441.html\" style=\"margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;padding-top:0px;padding-right:0px;padding-bottom:0px;padding-left:0px;font-family:Tahoma, Arial, Helvetica, sans-serif;font-size:14px;line-height:18px;text-align:left;\"/><a href=\"http://blog.csdn.net/thomescai\">http://blog.csdn.net/thomescai</a></span><br/></span></span></p>\n\n            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"java学习_1.java介绍以及第一个程序",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                \n<p> </p>\n<p>Java SE：Java StandardEdition</p>\n<p>Java ME: Java Micro Edition</p>\n<p>Java EE：Java EnterpriseEdition</p>\n<p> </p>\n<p>Java是由Sun公司推出的（已被Oracle公司收购）。</p>\n<p> </p>\n<p>收购价格：74亿美金</p>\n<p> </p>\n<p>J2SE=java SE、 J2ME、J2EE</p>\n<p> </p>\n<p>JDK：Java DevelopmentKit  java开发包（Java开发必备）</p>\n<p>JRE：Java RuntimeEnvironment （Java执行环境）</p>\n<p> </p>\n<p>JDK包含了JRE。</p>\n<p>Java.exe  javac.exe (c=compile)</p>\n<p>Bin=binary 二进制的</p>\n<p> </p>\n<p>Jdk 1.4, jdk 1.5(5.0), jdk 1.6(6.0)</p>\n<p> </p>\n<p>jdk 1.5(5.0)：Tiger，老虎</p>\n<p>jdk 1.6(6.0)：Mustang，野马</p>\n<p> </p>\n<p>1.      下载JDK</p>\n<p>2.      安装JDK</p>\n<p>3.      设定环境变量（可以是用户变量，也可以是系统变量），指向JDK安装目录中的bin目录</p>\n<p>4.      通过运行，输入cmd打开命令行窗口，输入java –version，显示出Java版本信息</p>\n<p> </p>\n<p>接下来就可以编写Java程序了。</p>\n<p> </p>\n<p>可以直接使用windows记事本来编写Java程序，也可以使用Editplus，UltraEdit等高级文本编辑工具编写Java程序，还可以使用专业的IDE（Integrated DevelopmentEnvironment）编写。</p>\n<p> </p>\n<p>Hello World的Java程序。</p>\n<p> </p>\n<p><strong>所有的Java代码，其后缀都是以java结尾。</strong></p>\n<p><strong> </strong></p>\n<p><strong>Java程序的执行过程分为两步：</strong></p>\n<p><strong>1.     编译</strong></p>\n<p><strong>2.     执行</strong></p>\n<p><strong> </strong></p>\n<p>Class文件是字节码文件，程序最终执行的就是这个字节码（bytecode）文件。</p>\n<p>编译命令：java Test.java</p>\n<p>执行命令：java Test（注意，Test后面没有.class）</p>\n<p> </p>\n<p> </p>\n<p>输入代码：</p>\n<p>public class Test</p>\n<p>{</p>\n<p>       public static voidmain(String[]args)</p>\n<p>       {</p>\n<p>              System.out.println(\"hello,world\");</p>\n<p>       }</p>\n<p>}</p>\n<p> </p>\n<p>去掉public 类名可以和文件名不一样，但是执行的时候按类名来。</p>\n<p> </p>\n<p><strong>Java是跨平台的语言，真正执行的不是二进制代码，而是字节码。</strong></p>\n<p><strong> </strong></p>\n<p><strong>JVM（Java Virtual Machine，Java虚拟机）</strong></p>\n<p><strong> </strong></p>\n<p><strong>Java是跨平台的，而JVM不是跨平台的（JVM是由C语言编写的）</strong></p>\n<p><strong> </strong></p>\n<p><strong>Java之所以能够做到跨平台，本质原因在于JVM不是跨平台的。</strong></p>\n<p><strong> </strong></p>\n<p><strong> </strong></p>\n            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"java体系结构",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                \n<p>java体系结构包含了四个相对独立但相关的技术：</p>\n<p>java程序设计语言；Java class文件格式；Java应用程序接口(API)；Java虚拟机；</p>\n<p>其中，Java API和Java虚拟机被称为Java平台<br/></p>\n<br/>            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"linux下查看java路径",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                <p>用命令 whereis java就可以看到了 <br/>\n eg: <br/>\n -bash-3.1$ whereis java <br/>\n java: /usr/bin/java /etc/java /usr/lib/java /usr/share/java /opt/jdk1.6.0_01/bin/java <br/><br/>\n 如果仅仅想知道java执行路径在那里的话 用which java就可以了 <br/>\n eg: <br/>\n -bash-3.1$ which java <br/>\n /usr/bin/java</p>            </div>\n                ",
			"keywords":["programing"]
		}
        
	]
}