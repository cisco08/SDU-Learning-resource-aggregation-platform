{
	"arr" : [
		
		{

			"title":"学习Python 免费电子书 TOP10（含下载）",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                <h2 style=\"margin:0px;padding:0px;color:rgb(54,46,43);font-family:Arial;line-height:26px;\"><strong>Python电子书</strong></h2><a href=\"http://www.ppvke.com/class/detailcontent/?hid=202&amp;tid=100074\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《简明 Python 教程》 中文版</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/?/question/275\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《Python学习手册》</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/?/question/145\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《Python语言入门》</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/?/question/639\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《Learning Python》第5版</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/?/question/640\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《Python Algorithms》</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/?/question/641\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《python for data analysis》</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/?/question/698\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《Natural Language Processing with Python》中文版</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/?/question/25281\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《Python核心编程》 第二版</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/?/question/25282\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《Python基础教程》 第二版</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/question/25718\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">Python学习手册（Learning Python）第四版英文版</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/question/25775\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">Python数据分析基础教程：NumPy学习指南（第2版）</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/question/25822\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《Introduction to Python for Econometrics, Statistics and Data Analysis》</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/question/25823\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《Python Data Visualization Cookbook》</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><a href=\"http://www.ppvke.com/Answer/question/26250\" style=\"color:rgb(106,57,6);text-decoration:none;font-family:Arial;font-size:14px;line-height:26px;\">《SciPy and NumPy》</a><br style=\"color:rgb(54,46,43);font-family:Arial;font-size:14px;line-height:26px;\"/><span style=\"font-family:Arial;font-size:14px;color:#362e2b;line-height:26px;\"> </span><br/><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><br/></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">python 是一个高级的编程语言，而且越来越受欢迎，我在这收集了十个python的免费电子书包含大量的练习、例子以及源代码等...<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><br/></span></p><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.1  简明 Python 教程（byte to Python）</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">        简明python教程是Swaroop C H 写给 python 新手们的书籍，他说“假如你知道电脑如何保存test文件，那么这本书就是你需要的”。<br/>        这本书对于python新手们或者比较生疏的程序猿们是很好的学习python启蒙教材，这也是我个人非常推荐的书！<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6597159\" style=\"color:rgb(202,0,0);text-decoration:none;\">中文版下载</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6612125\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版下载</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><br/></span></p><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.2 笨方法学Python（Learn Python The Hard Way）</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">        笨方法学python是Zed Shaw著的新手编程书籍，基于的版本是python2.6，“笨方法更简单”正是他们在书中编程以及他们想要告诉大家的：你是不是一直想要学习怎么编程却没想到你能编程？你是否想要为以后更大更复杂的编程打牢基础？你是否想要为你的大脑换一种新思维？那么这本书很适合你！<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"/></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6611577\" style=\"color:rgb(202,0,0);text-decoration:none;\">中文版下载</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6611927\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版下载</a> / <a href=\"http://learnpythonthehardway.org/book/\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版在线阅读</a></span></p><br style=\"font-family:Arial;font-size:14px;line-height:26px;\"/><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"/></p><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.3  像计算机科学家那么思考python版（How to think like a computer scientist - python version）</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">（原作者将第三条和第五条都写成了这个！）</span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">        这本书会给你实际现实生活问题相关的概述以及如何使用python解决它们，假如你确实想要学习python并使用它来作一些工作，那么这本书会是你想要的！你读这本书可能会比较缓慢，但是你最终会成为一个核心python程序猿！<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6616533\" style=\"color:rgb(202,0,0);text-decoration:none;\">中文版下载</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6597117\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版下载</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">---- 扩展：</span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">How to think like a computer scientist  - <a href=\"http://download.csdn.net/detail/longerzone/6594795\" style=\"color:rgb(202,0,0);text-decoration:none;\">C语言版下载</a> </span><br/></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"/></p><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.4  Python手册（The Python Tutorial）</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">官方文档总是最好的，无论你在用哪本书学习Python这个文档一定要打开在网页上打开着或者你也可以下载离线pdf版的。<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://www.pythondoc.com/pythontutorial27/index.html\" style=\"color:rgb(202,0,0);text-decoration:none;\">中文版在线阅读</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6612049\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版下载</a> /<a href=\"http://docs.python.org/2/tutorial/index.html\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版在线阅读</a></span></p><br style=\"font-family:Arial;font-size:14px;line-height:26px;\"/><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"/></p><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.5 Python 101</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">这个文档是一个学习python编程教学的大纲，这个课程包含了一个对Python语言的介绍，包括重要性以及常用的语言特性。<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://www.rexx.com/~dkuhlman/python_101/\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版在线阅读</a></span></p><br style=\"font-family:Arial;font-size:14px;line-height:26px;\"/><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"/></p><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.6  Ptyhon编程（Python Programming）</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">Python Programming是一个Python的Wikibooks，它是MIT课程上提到的书籍之一。<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">英文版下载 / <a href=\"http://en.wikibooks.org/wiki/Python_Programming\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版在线阅读</a></span></p><br style=\"font-family:Arial;font-size:14px;line-height:26px;\"/><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"/><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.7  Python标准库 （Python Standard Library）</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">虽然这个文档是为Python2.0所写，真的有点上了年纪，所以现在Python的更新导致它并不完整。但是他还是很值得一看的书籍，你可以通过学习它来获得Python编程的good idea。</span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"> </span><a href=\"http://docs.python.org/2/library/index.html#library-index\" style=\"color:rgb(202,0,0);text-decoration:none;font-size:18px;\">英文版在线阅读</a></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"> <a href=\"http://download.csdn.net/detail/longerzone/6789255\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版下载</a></span></p><br style=\"font-family:Arial;font-size:14px;line-height:26px;\"/><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"/><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.8 PLEAC Python</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">PLEAC Python就像一个速食Python食谱，包括的简单的例子来解决很多底层的问题，从字符串操作到<a href=\"http://lib.csdn.net/base/mysql\" class=\"replace_word\" title=\"MySQL知识库\" style=\"color:rgb(223,52,52);text-decoration:none;font-weight:bold;\">数据库</a>的访问。<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://zoomq.qiniudn.com/ZQScrapBook/ZqFLOSS/data/20051030162909/\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版在线阅读</a></span></p><br style=\"font-family:Arial;font-size:14px;line-height:26px;\"/><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"/><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.9  Text Processing in Python</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">我没有看过，但我想我会添加它是为了完整性。<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">暂无中文版</span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://gnosis.cx/TPiP/\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版在线阅读</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><br/></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\">=========================================================================================</p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">因为原文中第三条和第五条是一样的，所以只有上面九条，下面我来添加一些学习资料！</span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"/></p><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.10  深入Python （dive into python）</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">这也是网上比较推崇的Python学习书籍，比较经典，我个人先看的简明教材，现在在看这个！但是<span style=\"color:#362e2b;\">这本书基于 Python 2.2 或 2.3 版本编写，所以有些过旧，建议大家制作参考，学习还得看些别的书籍！</span></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6597145\" style=\"color:rgb(202,0,0);text-decoration:none;\">中文版下载</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6613245\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版下载</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><br/></span></p><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.11  Python学习手册（第四版）（O‘Reilly Learning Python 4rd Edition）</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-family:arial, '宋体', sans-serif;line-height:24px;text-indent:28px;\"><span style=\"font-size:18px;\">《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。</span></span><br/></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\">O‘Reilly 的动物系列，下面的中文版分享的是比较清晰的中文影印版，90多M，建议大家学习！<br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://pan.baidu.com/s/1EcrjX\" style=\"color:rgb(202,0,0);text-decoration:none;\">中文版下载</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><a href=\"http://download.csdn.net/detail/longerzone/6613229\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版下载</a></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><br/></p><h1 style=\"margin:0px;padding:0px;font-family:Arial;line-height:26px;\"><a/><a style=\"color:rgb(202,0,0);\"/><span style=\"font-size:18px;\">No.12 Python技术手册（python in a nutshell 2nd edition）</span></h1><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;\"><span style=\"font-size:18px;\"><span style=\"font-family:arial, '宋体', sans-serif;line-height:24px;text-indent:28px;\">《Python技术手册（第2版）》是一本全面介绍有关Python语言和Python程序开发专业知识的参考手册。书中详细介绍了Python开发工具的安装和使用、Python语言的语法结构、Python内置对象、库和模块以及Python与其他语言的扩展和嵌入，并专门介绍了有关Python网络和Web编程的内容和实例。</span><br/></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;text-indent:28px;\"><span style=\"font-family:arial, '宋体', sans-serif;font-size:18px;\"><span style=\"line-height:24px;\"><a href=\"http://download.csdn.net/detail/longerzone/6613149\" style=\"color:rgb(202,0,0);text-decoration:none;\">中文版下载</a></span></span></p><p style=\"margin-top:0px;margin-bottom:0px;padding-top:0px;padding-bottom:0px;font-family:Arial;font-size:14px;line-height:26px;text-indent:28px;\"><span style=\"font-family:arial, '宋体', sans-serif;font-size:18px;\"><span style=\"line-height:24px;\"><a href=\"http://download.csdn.net/detail/longerzone/6612207\" style=\"color:rgb(202,0,0);text-decoration:none;\">英文版下载</a></span></span></p>            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"快速入门Python之内置函数",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                <p style=\"margin-bottom:25px;font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif;background-color:rgb(255,255,255);\"/><p style=\"color:rgb(47,47,47);\">欢迎大家关注公众号<a href=\"https://link.jianshu.com/?t=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSSOE_qC47V53TPadg6hKMg\" style=\"background-color:transparent;color:rgb(49,148,208);\">【哈希大数据】</a></p><p/><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483664&amp;idx=1&amp;sn=2e8324f72db38e40d10bc4a3fe45fb5b&amp;chksm=fda8cacbcadf43ddc2d6f51ac78a0831d36b7067ff34f050ece0ed889a2803449f50ef4ed45e&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span style=\"color:#339999;\">【白话python连载（1）】 一起遇见python</span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><span style=\"margin:0px;padding:0px;\"><span><span><span><span style=\"color:#339999;\"><span style=\"margin:0px;padding:0px;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483672&amp;idx=1&amp;sn=c8029408bef5cd8ce96c74a4a435cf3b&amp;chksm=fda8cac3cadf43d5f448bf3dc3cfc99f7ffae17d6a587337edf1b435461ac9159b27803bd420#rd\"><span>【白话python连载（2）】 Python的程序结构</span></a></span><span><span><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483672&amp;idx=1&amp;sn=c8029408bef5cd8ce96c74a4a435cf3b&amp;chksm=fda8cac3cadf43d5f448bf3dc3cfc99f7ffae17d6a587337edf1b435461ac9159b27803bd420&amp;scene=21#wechat_redirect\"/></span></span></span></span></span></span></span></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><span style=\"margin:0px;padding:0px;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483691&amp;idx=1&amp;sn=381c33cd9efc219cd3903fd3af8f253d&amp;chksm=fda8caf0cadf43e6b8cbbc733795af5631272623b53761e76270a65b243f9d070e957155fd1f#rd\"><span><span><span><span><span style=\"color:#339999;\">【白话python连载（3）】 Python的输入输出实例</span></span></span></span></span></a></span></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483728&amp;idx=1&amp;sn=739641c70a2a189c30b9fd48c050293c&amp;chksm=fda8ca8bcadf439d8a591ee296eee5c088faee64fa278931f2e51f15611490b8b8f274503ee8&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span><span style=\"color:#339999;\">【白话python连载（4.1）】 python的数据类型</span></span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483740&amp;idx=1&amp;sn=34c85577f1c09bb09c649e29319bc7f4&amp;chksm=fda8ca87cadf43918e370dc71d1c6777e10ffdac4685770659578b1c4dd148bd9cc69384eda9&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span style=\"color:#339999;\">【白话python连载（4.2）】 python的数据类型</span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483767&amp;idx=1&amp;sn=fc5e8ea4bf6dcbc769f1c9ed1650d29d&amp;chksm=fda8caaccadf43ba9196989b2a8abe04419d54776d0228bd0f7e5e2a0777293e8e725c69af5f&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span style=\"color:#339999;\">【白话python连载（5）】 python的条件语句</span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483780&amp;idx=1&amp;sn=17773397bba77df56dc45cb0bb1e1bb7&amp;chksm=fda8ca5fcadf434910324492b22fa119455e7aead0edf45d3a9e08afd4014c4b2983b7050645&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span style=\"color:#339999;\">【白话python连载（6）】 python的循环语句</span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483792&amp;idx=1&amp;sn=d4847e467a34406481e9e69fe0338ee0&amp;chksm=fda8ca4bcadf435d80b72e1a0baede21e8b86536afc9b39e0f66c67a5f468c287e679698c7c9&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span style=\"color:#339999;\">【白话python连载（7.1）】 python的函数应用</span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483801&amp;idx=1&amp;sn=da695b24f19198548fd56d25698c12f3&amp;chksm=fda8ca42cadf4354e004e47ad9ce5a124772e5afe96af6e041c8d3634357568e4f08974ab14c&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span style=\"color:#339999;\">【白话python连载（7.2）】 python的模块介绍</span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483813&amp;idx=1&amp;sn=d0797988944f52b5a1add462ea2314fe&amp;chksm=fda8ca7ecadf4368b57595f8a2bc4e39c599504657f0a34fe116250ea71061a33cf15665c429&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span><span style=\"color:#339999;\">【白话python连载（8）】 python的异常处理</span></span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483828&amp;idx=1&amp;sn=dad0d4dbf42c81c772c8d8a433cc2450&amp;chksm=fda8ca6fcadf4379a02c5532b984f4737ba4d8151609db65d8b174ca95c9ed472a00f0360b54&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span><span style=\"color:#339999;\">【白话python连载（9.1）】 使用python处理文件</span></span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483857&amp;idx=1&amp;sn=4693483d4ea2c029de53e35069980295&amp;chksm=fda8ca0acadf431c32b928e179c1ab7d4830d9bcdef6e8d2131d0a64863f937a61524bf900ab&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span><span><span style=\"color:#339999;\">【白话python连载（9.2）】 python的os模块</span></span></span></a></p><p style=\"margin-bottom:0px;min-height:1em;clear:both;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;background-color:rgb(255,255,255);letter-spacing:1.5px;\"><span style=\"margin:0px;padding:0px;\"><span style=\"margin:0px;padding:0px;\"><a href=\"http://mp.weixin.qq.com/s?__biz=MzU4MzQwOTMzMg==&amp;mid=2247483864&amp;idx=1&amp;sn=5c982043bb30799397a7dbee79c4102c&amp;chksm=fda8ca03cadf431564e14541b1155ff7c0d1b7dd89ad0e8a7c356f53c79385e1dad2959edc15&amp;scene=21#wechat_redirect\" style=\"margin:0px;padding:0px;\"><span style=\"color:#ff0000;\">【白话python连载（10）】 python的内置函数</span></a></span></span></p><br/><span style=\"color:rgb(47,47,47);font-weight:700;\">python的内置函数――基础介绍总结篇</span><br/><span style=\"color:rgb(47,47,47);font-weight:700;\">68个内置函数</span><br/><span style=\"color:#2f2f2f;\">python3内置了68个常用的函数，它们无需额外安装，即可直接使用，熟悉应用之后可以简化许多繁琐的程序步骤。按照这些函数功能基本将其分为7大类，现在我们一一来了解这些内置函数的功能。</span><br/><span style=\"color:rgb(47,47,47);font-weight:700;\">内置函数及模块介绍</span><br/><span style=\"color:#2f2f2f;\">1、数学计算类</span><br/><span style=\"color:#2f2f2f;\">(1)abs() 返回数字的绝对值。</span><br/><span style=\"color:#2f2f2f;\">(2)divmod() 返回一个包含商和余数的元组(a // b, a % b)。</span><br/><span style=\"color:#2f2f2f;\">(3)len() 返回对象（字符、列表、元组等）长度或项目个数。</span><br/><span style=\"color:#2f2f2f;\">(4)map() 实现映射关系，接收两个参数，一个是函数，一个是序列，map将传入的函数依次作用于序列的每个元素，并把结果作为list返回。</span><br/><span style=\"color:#2f2f2f;\">(5)max() 返回给定参数的最大值，参数可以为序列。</span><br/><span style=\"color:#2f2f2f;\">(6)min() 返回给定参数的最小值，参数可以为序列。</span><br/><span style=\"color:#2f2f2f;\">(7)pow() 返回 x的y次方的值。</span><br/><span style=\"color:#2f2f2f;\">(8)round() 返回浮点数的四舍五入值。</span><br/><span style=\"color:#2f2f2f;\">(8)sum() 对一列数进行求和计算</span><br/><span style=\"color:#2f2f2f;\">2、数据类型转换</span><br/><span style=\"color:#2f2f2f;\">（详细实例可见白话４中的介绍）</span><br/><span style=\"color:#2f2f2f;\">（1）ascii() 以ascii编码方式返回对象的字符串。</span><br/><span style=\"color:#2f2f2f;\">（2）bin() 返回一个整数 int 或者长整数 long int 的二进制表示。</span><br/><span style=\"color:#2f2f2f;\">（3）bool() 将给定参数转换为布尔类型，如果没有参数，返回 False。</span><br/><span style=\"color:#2f2f2f;\">（4）bytearray() 返回对象的字节形式，其中元素是可变的，可以添加删除等。</span><br/><span style=\"color:#2f2f2f;\">（5）bytes 返回一个新的 bytes 对象，它是 bytearray 的不可变版本。</span><br/><span style=\"color:#2f2f2f;\">（6）chr() 用一个范围在 range（256）内的（就是0～255十进制和十六进制）整数作参数，返回一个对应的字符。</span><br/><span style=\"color:#2f2f2f;\">（7）compile() 将一个字符串编译为字节代码。使用eval()，exec()完成执行操作。</span><br/><span style=\"color:#2f2f2f;\">（8）complex()创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数。</span><br/><span style=\"color:#2f2f2f;\">（9）dict() 用于创建或转换类型一个字典。</span><br/><span style=\"color:#2f2f2f;\">（10）enumerate() 根据可迭代对象创建枚举对象。</span><br/><span style=\"color:#2f2f2f;\">（11）float() 函数用于将整数和字符串转换成浮点数。</span><br/><span style=\"color:#2f2f2f;\">（12）frozenset() 返回一个不可变的集合，该集合不能再添加或删除任何元素。</span><br/><span style=\"color:#2f2f2f;\">（13）hash() 转换得到字符串或者数值等对象的哈希值。</span><br/><span style=\"color:#2f2f2f;\">（14）hex() 将整数转换成16进制字符串。</span><br/><span style=\"color:#2f2f2f;\">（15）int() 将一个字符串或数字转换为整型。</span><br/><span style=\"color:#2f2f2f;\">（16）list() 将其他序列类型数据转换为列表。</span><br/><span style=\"color:#2f2f2f;\">（17）iter() 根据传入的参数创建一个新的可迭代对象。</span><br/><span style=\"color:#2f2f2f;\">（18）object() 创建一个新的object对象。</span><br/><span style=\"color:#2f2f2f;\">（19）oct() 将一个整数转换成8进制字符串。</span><br/><span style=\"color:#2f2f2f;\">（20）ord() 返回Unicode字符对应的整数。</span><br/><span style=\"color:#2f2f2f;\">（21）range() 根据传入的参数创建一个新的range对象。</span><br/><span style=\"color:#2f2f2f;\">（22）set() 创建或转换一个无序不重复元素集。</span><br/><span style=\"color:#2f2f2f;\">（23）slice() 根据传入的参数创建一个新的切片对象。</span><br/><span style=\"color:#2f2f2f;\">（24）str() 将对象转化为字符串类型，方便阅读。</span><br/><span style=\"color:#2f2f2f;\">（25）super()根据传入的参数创建一个新的子类和父类关系的代理对象。</span><br/><span style=\"color:#2f2f2f;\">（26）tuple() 将对象（列表等）转换为元组类型。</span><br/><span style=\"color:#2f2f2f;\">（27）memoryview() 根据传入的参数创建一个新的内存查看对象.</span><br/><span style=\"color:#2f2f2f;\">3、装饰器类</span><br/><span style=\"color:#2f2f2f;\">（1）property：标示属性的装饰器，@ property。</span><br/><span style=\"color:#2f2f2f;\">classmethod：标示方法为类方法的装饰器，@classmethod。</span><br/><span style=\"color:#2f2f2f;\">staticmethod：标示方法为静态方法的装饰器，@staticmethod</span><br/><span style=\"color:#2f2f2f;\">判断类</span><br/><span style=\"color:#2f2f2f;\">（2）all() 判断可迭代对象的每个元素是否都为True值。</span><br/><span style=\"color:#2f2f2f;\">（3）any() 判断可迭代对象的元素是否存在为True值的元素。</span><br/><span style=\"color:#2f2f2f;\">（4）callable() 判断对象是否可被调用。</span><br/><span style=\"color:#2f2f2f;\">（5）hasattr() 判断某个对象是否含有特定属性。</span><br/><span style=\"color:#2f2f2f;\">（6）isinstance() 判断对象是否是类或者类型元组中任意类元素的实例。</span><br/><span style=\"color:#2f2f2f;\">（7）issubclass() 判断类是否是另外一个类或者类型元组中任意类元素的子类。</span><br/><span style=\"color:#2f2f2f;\">4、信息显示类</span><br/><span style=\"color:#2f2f2f;\">（1）dir() 返回对象或者当前作用域内的属性列表。</span><br/><span style=\"color:#2f2f2f;\">（2）format() 格式化显示值。</span><br/><span style=\"color:#2f2f2f;\">（3）getattr() 获取对象的属性值。</span><br/><span style=\"color:#2f2f2f;\">（4）globals() 返回当前作用域内的全局变量和其值组成的字典。</span><br/><span style=\"color:#2f2f2f;\">（5）help() 返回对象的帮助信息。</span><br/><span style=\"color:#2f2f2f;\">（6）id() 返回对象的唯一标识符。</span><br/><span style=\"color:#2f2f2f;\">（7）locals() 返回当前作用域内的局部变量和其值组成的字典。</span><br/><span style=\"color:#2f2f2f;\">（8）type() 返回对象的类型，或者根据传入的参数创建一个新的类型。</span><br/><span style=\"color:#2f2f2f;\">（9）vars() 返回当前作用域内的局部变量和其值组成的字典，或者返回对象的属性列表。</span><br/><span style=\"color:#2f2f2f;\">（10）print() 将输出对象打印输出给用户。</span><br/><span style=\"color:#2f2f2f;\">（11）input() 读取用户输入值。</span><br/><span style=\"color:#2f2f2f;\">5、迭代对象操作类</span><br/><span style=\"color:#2f2f2f;\">（1）filter() 使用指定方法过滤可迭代对象的元素。</span><br/><span style=\"color:#2f2f2f;\">（2）next() 返回可迭代对象中的下一个元素值。</span><br/><span style=\"color:#2f2f2f;\">（3）reversed() 反转序列生成新的可迭代对象。</span><br/><span style=\"color:#2f2f2f;\">（4）sorted() 对可迭代对象进行排序，返回一个新的列表。</span><br/><span style=\"color:#2f2f2f;\">（5）zip() 聚合传入的每个迭代器中相同位置的元素，返回一个新的元组类型迭代器。</span><br/><span style=\"color:#2f2f2f;\">6、其它操作类</span><br/><span style=\"color:#2f2f2f;\">（1）delattr() 删除对象的属性。</span><br/><span style=\"color:#2f2f2f;\">（2）eval() 执行动态表达式求值。</span><br/><span style=\"color:#2f2f2f;\">（3）exec() 执行动态语句块（多条表达式）。</span><br/><span style=\"color:rgb(47,47,47);font-weight:700;\">import</span><span style=\"color:#2f2f2f;\">() 进行动态导入模块</span><br/><span style=\"color:#2f2f2f;\">（4）open() 使用指定的模式和编码打开文件，返回文件读写对象。</span><br/><span style=\"color:#2f2f2f;\">（5）repr() 返回一个对象的字符串表现形式(给解释器)。</span><br/><span style=\"color:#2f2f2f;\">（6）setattr() 设置对象的属性值。</span><p style=\"margin-bottom:25px;color:rgb(47,47,47);font-family:'-apple-system', 'SF UI Text', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', 'WenQuanYi Micro Hei', sans-serif;background-color:rgb(255,255,255);\"><span style=\"font-weight:700;\">总结：</span><br/>到此为止我们已经完成了基础的python内容介绍，从基础语法、变量类型、运算方法、条件、判断与循环、各种数据类型的应用、与文件和系统的交互操作以及对异常的处理等等。接下来我们将结合抓取的数据，进行详细介绍使用python完成数据分析、统计算法和机器学习算法等。</p>            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"python 基础",
			"content":"\n                    <div class=\"markdown_views\">\n                <p><a href=\"https://blog.csdn.net/claroja/article/details/79850630\">python 关键字</a></p>\n\n\n\n<h1 id=\"容器\">容器</h1>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/72677058\">Python容器简介</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72764686\">Python 容器API</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/77366684\">Python 生成器generator</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/77367392\">Python迭代器</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/77443002\">Python 编码规范</a></p>\n\n\n\n<h1 id=\"字符\">字符</h1>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/72640209\">Python 字符编码</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79064905\">字节(bytes) 二进制序列类型</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72649937\">Python 基本字符</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79042974\">字符串方法</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72676409\">Python 格式化字符串</a></p>\n\n\n\n<h1 id=\"循环\">循环</h1>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/77245028\">python 循环</a></p>\n\n\n\n<h1 id=\"函数\">函数</h1>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/71122054\">Python 函数定义</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72786758\">Python 函数详解</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72639458\">Python 内置函数</a></p>\n\n\n\n<h1 id=\"面向对象\">面向对象</h1>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/72779073\">Python 面向对象,类,实例</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72781877\">Python 封装,继承,多态</a></p>\n\n\n\n<h1 id=\"异常处理\">异常处理</h1>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/72654353\">Python 异常处理</a></p>\n\n\n\n<h1 id=\"标准库\">标准库</h1>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/78435085\">sys</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72626412\">Python import(导入)</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72417904\">re库 正则表达式</a> <br/>\n  Python difflib库 <br/>\n  <a href=\"http://blog.csdn.net/claroja/article/details/72722386\">Python filecmp库</a> <br/>\n  <a href=\"http://blog.csdn.net/claroja/article/details/72677661\">Python datetime数据类型</a> <br/>\n  sqlite3 <br/>\n  <a href=\"http://blog.csdn.net/claroja/article/details/79197548\">time</a> <br/>\n  <a href=\"http://blog.csdn.net/claroja/article/details/70477851\">os shutil</a> <br/>\n  <a href=\"http://blog.csdn.net/claroja/article/details/72724464\">Python json</a> <br/>\n  <a href=\"http://blog.csdn.net/claroja/article/details/72726362\">Python pickle库</a> <br/>\n  <a href=\"http://blog.csdn.net/claroja/article/details/72769762\">Python SQLite3库</a> <br/>\n  <a href=\"http://blog.csdn.net/claroja/article/details/78281855\">Socket</a> <br/>\n <a href=\"http://blog.csdn.net/claroja/article/details/78781224\">python random 模块</a> <br/>\n <a href=\"https://blog.csdn.net/claroja/article/details/79877806\">http.server模块</a></p>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/72983617\">pydev配置</a>  <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72983639\">Eclipse Windows环境配置</a>  <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/72983659\">Python Windows安装</a>  <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/73108779\">Eclipse Linux环境配置</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/73826645\">PyDev操作</a></p>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/74912645\">Python pip包管理器</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/76141636\">Spyder</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/76818223\">python 单元测试</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79071666\">jupyter</a> <br/>\n<a href=\"https://blog.csdn.net/claroja/article/details/79972741\">python 打包和发布模块</a></p>            </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/markdown_views-ea0013b516.css\"/>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"python提高",
			"content":"\n                    <div class=\"markdown_views\">\n                <p><a href=\"http://blog.csdn.net/claroja/article/details/77058482\">python 特殊方法(dunder-getitem)</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79032237\">线程</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79031894\">进程</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79033080\">协程</a></p>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/79541464\">python 数据结构</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79556579\">python 数据结构 顺序表</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79557397\">python 数据结构 链表</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79571083\">python 数据结构 树的概念</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79571611\">python 数据结构 二叉树</a> <br/>\n<a href=\"https://blog.csdn.net/claroja/article/details/80007829\">python数据结构 hash表</a></p>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/79558145\">冒泡排序</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79571823\">选择排序</a></p>\n\n<p><a href=\"http://blog.csdn.net/claroja/article/details/79237887\">ctypes</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79278187\">swig</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79270575\">cProfile</a> <br/>\n<a href=\"http://blog.csdn.net/claroja/article/details/79270741\">timeit</a> <br/>\n<a href=\"https://blog.csdn.net/claroja/article/details/79815236\">apscheduler</a></p>            </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/markdown_views-ea0013b516.css\"/>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"python多线程socket编程--多客户端接入",
			"content":"\n                    <div class=\"markdown_views\">\n                <p>Python中实现socket通信的服务端比较复杂，而客户端非常简单，所以客户端基本上都是用sockct模块实现，而服务 <br/>\n端用有很多模块可以使用，如下： <br/>\n<img src=\"https://img-blog.csdn.net/20170909154352302?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG9ja2V5MjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/></p>\n\n\n\n<h3 id=\"1客户端\">1、客户端</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\">#coding:utf-8</span>\n<span class=\"hljs-string\">'''\nfile:client.py\ndate:9/9/17 3:43 PM\nauthor:lockey\nemail:lockey@123.com\ndesc:socket编程客户端，python3.6.2\n'''</span>\n<span class=\"hljs-keyword\">import</span> socket,sys\nHOST = <span class=\"hljs-string\">'192.168.1.6'</span>\nPORT = <span class=\"hljs-number\">8998</span>\nADDR =(HOST,PORT)\nBUFSIZE = <span class=\"hljs-number\">1024</span>\n\nsock = socket.socket()\n<span class=\"hljs-keyword\">try</span>:\n    sock.connect(ADDR)\n    print(<span class=\"hljs-string\">'have connected with server'</span>)\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">True</span>:\n      data = input(<span class=\"hljs-string\">'lockey# '</span>)\n      <span class=\"hljs-keyword\">if</span> len(data)&gt;<span class=\"hljs-number\">0</span>:\n        print(<span class=\"hljs-string\">'send:'</span>,data)\n        sock.sendall(data.encode(<span class=\"hljs-string\">'utf-8'</span>)) <span class=\"hljs-comment\">#不要用send()</span>\n        recv_data = sock.recv(BUFSIZE)\n        print(<span class=\"hljs-string\">'receive:'</span>,recv_data.decode(<span class=\"hljs-string\">'utf-8'</span>))\n      <span class=\"hljs-keyword\">else</span>:\n        sock.close()\n        <span class=\"hljs-keyword\">break</span>\n<span class=\"hljs-keyword\">except</span> Exception:\n    print(<span class=\"hljs-string\">'error'</span>)\n    sock.close()\n    sys.exit()\n</code></pre>\n\n\n\n<h3 id=\"2socketserver模块\">2、SocketServer模块</h3>\n\n<p>为了能够让多个客户端同时接入服务并进行通信，服务端将使用SocketServer模块来实现，这样的话用户不用在子线程结束后，利用父进程对它进行处理，也不用关心socket的关闭，一切都由SocketServer来完成。</p>\n\n<pre class=\"prettyprint\"><code class=\" hljs python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\">#coding:utf-8</span>\n<span class=\"hljs-string\">'''\nfile:client.py\ndate:9/9/17 3:43 PM\nauthor:lockey\nemail:lockey@123.com\ndesc:socket编程服务器端，python3.6.2\n'''</span>\n<span class=\"hljs-keyword\">from</span> socketserver <span class=\"hljs-keyword\">import</span> BaseRequestHandler,ThreadingTCPServer\n<span class=\"hljs-keyword\">import</span> threading\n\nBUF_SIZE=<span class=\"hljs-number\">1024</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Handler</span><span class=\"hljs-params\">(BaseRequestHandler)</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">handle</span><span class=\"hljs-params\">(self)</span>:</span>\n        address,pid = self.client_address\n        print(<span class=\"hljs-string\">'%s connected!'</span>%address)\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">True</span>:\n            data = self.request.recv(BUF_SIZE)\n            <span class=\"hljs-keyword\">if</span> len(data)&gt;<span class=\"hljs-number\">0</span>:\n                print(<span class=\"hljs-string\">'receive='</span>,data.decode(<span class=\"hljs-string\">'utf-8'</span>))\n                cur_thread = threading.current_thread()\n                <span class=\"hljs-comment\">#response = '{}:{}'.format(cur_thread.ident,data)</span>\n                self.request.sendall(<span class=\"hljs-string\">'response'</span>.encode(<span class=\"hljs-string\">'utf-8'</span>))\n                print(<span class=\"hljs-string\">'send:'</span>,<span class=\"hljs-string\">'response'</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                print(<span class=\"hljs-string\">'close'</span>)\n                <span class=\"hljs-keyword\">break</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    HOST = <span class=\"hljs-string\">'192.168.1.6'</span>\n    PORT = <span class=\"hljs-number\">8998</span>\n    ADDR = (HOST,PORT)\n    server = ThreadingTCPServer(ADDR,Handler)  <span class=\"hljs-comment\">#参数为监听地址和已建立连接的处理类</span>\n    print(<span class=\"hljs-string\">'listening'</span>)\n    server.serve_forever()  <span class=\"hljs-comment\">#监听，建立好TCP连接后，为该连接创建新的socket和线程，并由处理类中的handle方法处理</span>\n    print(server)</code></pre>\n\n<p>以下测试中我使用另外一台主机和本机的两个中断去连接服务器，都可以正常连接并且能进行数据应答交互 <br/>\n<img src=\"https://img-blog.csdn.net/20170909155432730?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTG9ja2V5MjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"/></p>\n\n<p><strong>注意：</strong>此程序示例运行平台为rhel7.2.x86_64，python版本为3.6.2，对于windows平台和非同一python版本的用户可能缺乏一定的兼容性，如果是其他平台用户请自行修正！！</p>\n\n<h4 id=\"有任何问题可以留言讨论\">有任何问题可以留言讨论</h4>            </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/markdown_views-ea0013b516.css\"/>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"python django mysql 连接",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                &#13;\npython mysql 测试<br/>&#13;\n1： 创建APP <br/>&#13;\n2： 修改setting  节点 TEMPLATES <br/>&#13;\n         'default': {<br/>&#13;\n            'ENGINE': 'django.db.backends.mysql',<br/>&#13;\n            'NAME': 'bbs_db',<br/>&#13;\n            'USER':'jzgjxj',<br/>&#13;\n            'PASSWORD':'abcd1234',<br/>&#13;\n            'HOST':'127.0.0.1',<br/>&#13;\n            'PORT':'9527'<br/>&#13;\n        }<br/>&#13;\n3：注册 app  setting 中  节点 INSTALLED_APPS (注意 这里不用添加项目名，只需要添加app的名称即可)<br/>&#13;\n4：编写 models <br/>&#13;\n    <br/>&#13;\n    class Publisher(models.Model):<br/>&#13;\n        name = models.CharField(max_length=30)<br/>&#13;\n        address = models.CharField(max_length=50)<br/>&#13;\n        city = models.CharField(max_length=60)<br/>&#13;\n        state_province = models.CharField(max_length=30)<br/>&#13;\n        country = models.CharField(max_length=50)<br/>&#13;\n        website = models.URLField()<br/>&#13;\n        <br/>&#13;\n5：python manage.py sqlall app名称<br/>&#13;\n      注意：sqlall 命令并没有在数据库中真正创建数据表，只是把SQL语句段打印出来。运行 syncdb 命令<br/>&#13;\n      <br/>&#13;\n    python manage.py syncdb<br/>&#13;\n6： 表创建成功<br/>&#13;\n<p>    <img src=\"http://img.blog.csdn.net/20171109150114074?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VveGluamllMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"/></p>&#13;\n<p>添加数据： views 中操作即可<br/>&#13;\n</p>&#13;\n<p/>&#13;\n<pre style=\"background-color:#ffffff; color:#000000; font-family:'宋体'; font-size:9.0pt\">p1 = Publisher(<span style=\"color:#660099\">name</span>=<span style=\"color:#008080; font-weight:bold\">'Addison-Wesley'</span>, <span style=\"color:#660099\">address</span>=<span style=\"color:#008080; font-weight:bold\">'75 Arlington Street'</span>,<span style=\"color:#660099\">city</span>=<span style=\"color:#008080; font-weight:bold\">'Boston'</span>, <span style=\"color:#660099\">state_province</span>=<span style=\"color:#008080; font-weight:bold\">'MA'</span>, <span style=\"color:#660099\">country</span>=<span style=\"color:#008080; font-weight:bold\">'U.S.A.'</span>,<span style=\"color:#660099\">website</span>=<span style=\"color:#008080; font-weight:bold\">'http://www.apress.com/'</span>)\np1.save()\np2 = Publisher(<span style=\"color:#660099\">name</span>=<span style=\"color:#008080; font-weight:bold\">\"O'Reilly\"</span>, <span style=\"color:#660099\">address</span>=<span style=\"color:#008080; font-weight:bold\">'10 Fawcett St.'</span>,<span style=\"color:#660099\">city</span>=<span style=\"color:#008080; font-weight:bold\">'Cambridge'</span>, <span style=\"color:#660099\">state_province</span>=<span style=\"color:#008080; font-weight:bold\">'MA'</span>, <span style=\"color:#660099\">country</span>=<span style=\"color:#008080; font-weight:bold\">'U.S.A.'</span>,<span style=\"color:#660099\">website</span>=<span style=\"color:#008080; font-weight:bold\">'http://www.oreilly.com/'</span>)\np2.save()\npublisher_list = Publisher.objects.all()</pre>&#13;\n<img src=\"http://img.blog.csdn.net/20171109153214138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ3VveGluamllMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"/>&#13;\n<p/>&#13;\n<p><br/>&#13;\n</p>&#13;\n<p>数据操作部分：</p>&#13;\n<p>1：数据过滤</p>&#13;\n<p>    </p>&#13;\n<div class=\"cnblogs_code\">&#13;\n<pre>Publisher.objects.filter(country=<span style=\"color:#800000\">\"</span><span style=\"color:#800000\">U.S.A.</span><span style=\"color:#800000\">\"</span>, state_province=<span style=\"color:#800000\">\"</span><span style=\"color:#800000\">CA</span><span style=\"color:#800000\">\"</span>) #直接获取符合条件的对象 </pre>&#13;\n</div>&#13;\n<pre>Publisher.objects.filter(name__contains=<span style=\"color:#800000\">\"</span><span style=\"color:#800000\">press</span><span style=\"color:#800000\">\"</span>)   # 类似模糊查询  <span style=\"color:#000000\">LIKE </span><span style=\"color:#800000\">'</span><span style=\"color:#800000\">%press%</span><span style=\"color:#800000\">'</span>;  用法是 __contains&#13;\n<pre>Publisher.objects.get(name=<span style=\"color:#800000\">\"</span><span style=\"color:#800000\">Apress Publishing</span><span style=\"color:#800000\">\"</span>)  # 获取单个对象&#13;\n<pre>Publisher.objects.order_by(<span style=\"color:#800000\">\"</span><span style=\"color:#800000\">name</span><span style=\"color:#800000\">\"</span>)  # 指定排序  逆向的话在 name前 加上 - 符号&#13;\n<pre>Publisher.objects.all()[0]  # 只显示第一个&#13;\n<pre>p = Publisher.objects.get(name=<span style=\"color:#800000\">\"</span><span style=\"color:#800000\">Addison-Wesley</span><span style=\"color:#800000\">\"</span><span style=\"color:#000000\">)\np.delete()     # 删除对象</span></pre><br/></pre></pre></pre><br/></pre>&#13;\n<br/>&#13;\n<p/>&#13;\n<p><br/>&#13;\n</p>&#13;\n            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"python自学（1）-安装环境及工具、学习教程资料的准备",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                \n<p>        作为一个后端开发的程序员，我有一个成为全栈工程师的梦想，除了Java、基本的前端知识和几种数据库的使用，还应该深入学习JavaScript(水很深)、python(做数据挖掘分析)、redis(noSql系列)、分布式应用方式、项目优化等的各种高并发的控制、软件测试上的各种稳定新与压力测试等以及软件需求和开发的原型或逻辑设计等。任重道远啊，也不知道能完成多少。</p>\n<p>写这些python自学的博客，是为了记录学习历程，也让学习更有动力，额外的价值就是你看到了这些文章，帮助你学习，咦哈哈哈哈。</p>\n<p>好了，入正题。</p>\n<p><br/></p>\n<p><strong>（-）历经千辛万苦，准备的能给我帮助的学习资料：</strong></p>\n<p>            <strong>1.  一篇很有价值的前人的学习心得  </strong></p>\n<p>                  https://zhuanlan.zhihu.com/p/24917400   本人将按着他总结的技能树而学习，直接上图。说真心的，谢谢sufaith的分享。还有一些开发工具，可以很好的下载使用。</p>\n<p style=\"text-align:center;\"><img src=\"https://img-blog.csdn.net/20170928125901849?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgwOTY2ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"/><br/></p>\n<p>          <strong>2.  学习教程   廖雪峰的官网  </strong>  </p>\n<p>                  https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000   很容易上手，虽然我有两年多的Java语言经验，但是我很乐意使用傻瓜式基础教程。Python开发环境可以按照介绍搞定，你喜欢的话。</p>\n<p><br/></p>\n<p><strong>（二）我的开发环境与开发工具的准备</strong></p>\n<p>           你可以根据前两篇文章去安装Python环境和开发工具，这里我要说一下我的安装。</p>\n<p>        <strong> 1. 安装Python环境</strong></p>\n<p>                   先下载Python，下载地址就是python官网，“”Python环境“这个东西类似Java的JDK环境，安装也类似，需要在Path里配置。</p>\n<p>                    我的配置时windows64位，我要用python3的系列，要注意的是python2与3不兼容的，我用3。如图: <span style=\"white-space:pre;\">\n</span></p>\n<p>                      a.图</p>\n<p><span style=\"white-space:pre;\"/>                     <img src=\"https://img-blog.csdn.net/20170928125408938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgwOTY2ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" width=\"450\" height=\"200\" alt=\"\" style=\"text-align:center;\"/><span style=\"text-align:center;\"> </span></p>\n<p><span style=\"text-align:center;\">                    b图.   </span></p>\n<p><span style=\"text-align:center;\">                                </span><span style=\"text-align:center;\"> </span><img src=\"https://img-blog.csdn.net/20170928125429120?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgwOTY2ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" width=\"450\" height=\"200\" alt=\"\" style=\"text-align:center;\"/></p>\n<p>                     c图.             </p>\n<p><span style=\"text-align:center;\">                               </span><img src=\"https://img-blog.csdn.net/20170928125505526?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgwOTY2ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" width=\"450\" height=\"200\" alt=\"\" style=\"text-align:center;\"/><span style=\"text-align:center;\"> </span></p>\n<p><span style=\"text-align:center;\">                     d图.    </span><span style=\"text-align:center;\"> </span></p>\n<p>                                <img src=\"https://img-blog.csdn.net/20170928125525989?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgwOTY2ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" width=\"450\" height=\"200\" alt=\"\" style=\"text-align:center;\"/></p>\n<p>             下载后，直接双击安装,3系列的话安装过程中选中配置到path，可以自动配置。安装好后，cmd可以验证。我的安装过程类型下图经验介绍，比较简单，不做详述。</p>\n<p style=\"text-align:center;\"><img src=\"https://blog.csdn.net/qq_28096687/article/details/78120560\" alt=\"\"/><img src=\"https://img-blog.csdn.net/20170928125349460?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgwOTY2ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"/><br/></p>\n<p style=\"text-align:left;\"><br/></p>\n<p>            <strong>2. 开发环境IDE</strong></p>\n<p>                    python本身是脚本语言，直接Notepad++编写后，在cmd里使用“python  文件” 命令行方式执行就可以。 </p>\n<p>                    python自己的IDE常用的是pycharm，我平时用idea开发Java项目，idea与pycharm同组织机构，所以IDE我采用在原来的idea安装python插件。</p>\n<p>                    那么问题来了，怎么在idea安装我想要的python插件？</p>\n<p>                       打开idea --&gt; 工具栏File --&gt; Setting --&gt; 搜索‘plugins’ --&gt; 在‘plugins’窗口搜索python -&gt; 选择python community edition,点击Install按钮 --&gt; 重启idea，即可。</p>\n<p style=\"text-align:center;\"><img src=\"https://blog.csdn.net/qq_28096687/article/details/78120560\" alt=\"\"/><img src=\"https://img-blog.csdn.net/20170928125331946?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjgwOTY2ODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"/><br/></p>\n<p style=\"text-align:left;\"><br/></p>\n<p style=\"text-align:left;\">         自此，大致的学习前的工具配置好了。才能进入基础学习环节。<img alt=\"奋斗\" src=\"http://static.blog.csdn.net/xheditor/xheditor_emot/default/struggle.gif\"/></p>\n            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"用 python 写一些常见的数学函数",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                \n<h1><a href=\"http://baike.baidu.com/item/%E6%B1%89%E8%AF%BA%E5%A1%94/3468295#4_1\"><span style=\"font-size:18px;\">汉诺塔游戏</span></a></h1>\n<p/>\n<pre class=\"python\">#汉诺塔\nsteps = []\ndef move(n, a=\"A\", b=\"B\", c=\"C\"):\n\tif n == 1:\n\t\tstep = a + \"--&gt;\" + c #1个时，直接从A移到C\n\t\tsteps.append(step)\n\telse:\n\t\tmove(n-1, a,c,b) #将n-1个借助C从A移到B 再把最大的从A移到C\n\t\tstep =  a + \"--&gt;\" + c\n\t\tsteps.append(step)\n\t\tmove(n-1, b, a, c) #将n-1个借助A从B移到C\nmove(3)\nprint(\"移动次数为：%d \\n操作步骤为：\\n%s\" % (len(steps),steps))</pre>\n<p><br/></p>\n<h1><a href=\"http://baike.baidu.com/link?url=2TrXt_U_m0p-gp2rTSGkEYTi62L8WSDXHxcVo9Rbru39uZDfkp8HYMuJ83zUJZvcKot_8S0wcum2pKpTR1HdYelqAxCZfqsu9p1Pmh7be5gFjaSX1cvmETLlh1dGt5kNOtIsBiRkmD84Xcoky_C7da\"><span style=\"font-size:18px;\">斐波那契数列</span></a></h1>\n<p>方法1</p>\n<p/>\n<pre class=\"python\">def fibonacci(n):\n\ta = 1\n\tL = [1,1]\n\twhile a &lt; n:\n\t\tx = L[-1] + L[-2]\n\t\tL.append(x)\n\t\ta = a + 1\n\treturn L\nprint(fibonacci(20))</pre>\n<p>方法2</p>\n<pre class=\"python\">def fib(max):\n    n, a, b = 0, 0, 1\n    while n &lt; max:\n        print(b)\n        a, b = b, a + b\n        n = n + 1</pre>\n<p>使用生成器实现</p>\n<p/>\n<pre class=\"python\">def fib(max):\n    n, a, b = 0, 0, 1\n    while n &lt; max:\n        yield b\n        a, b = b, a + b\n        n = n + 1\n    return 'done'</pre>\n<p/>\n<pre class=\"python\">g = fib(6)\nwhile True:\n\ttry:\n\t\tx = next(g)\n\t\tprint('g:', x)\n\texcept StopIteration as e:\n\t\tprint('Generator return value:', e.value)\n\t\tbreak</pre><br/><br/><h1><a href=\"http://baike.baidu.com/item/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92#4_10\"><span style=\"font-size:18px;\">杨辉三角</span></a></h1>\n<p>使用生成器实现</p>\n<p/>\n<pre class=\"python\">def triangles():\n    ret = [1]\n    while True:\n        yield ret\n        for i in range(1, len(ret)):\n            ret[i] = pre[i] + pre[i - 1]\n        ret.append(1)\n        pre = ret[:]</pre><pre class=\"python\">n = 0\nfor x in triangles():\n\tprint(x)\n\tn = n + 1\n\tif n == 10:\n\t\tbreak</pre>\n<p/>\n<p>使用列表生成式和生成器</p>\n<p/>\n<pre class=\"python\">def triangles(n):\n\tL = [1]\n\tm = 0\n\twhile m &lt; n:\n\t\tyield L\n\t\tL.append(0)\n\t\tL = [L[i - 1] + L[i] for i in range(len(L))]\n\t\tm = m + 1</pre><pre class=\"python\">l = triangles(10)\nfor x in l:\n\tprint(x)</pre><br/><h1><a href=\"http://baike.baidu.com/link?url=OkRPxCiC6G7W9BQvmKoDz0IEwUS077EIGyJtxJNqKI76Nni5n0A3_0mzjhelNofPuDzI_8f5I8sLSu46JiiKdfQ6PvmygisSMOxuqcJEBwP9_R2Uos79fev-JX1V9o589Yd5J004VojCIzUz67Tnf029jBAR1GfLbsTt-isgBF3\"><span style=\"font-size:18px;\">质数</span></a></h1>\n<p/>\n<pre class=\"python\">#定义一个从3开始的奇数序列\n def _odd_iter():\n    n = 1\n    while True:\n        n = n + 2\n        yield n</pre><pre class=\"python\">#定义一个筛选函数 过滤点可以被之前的数整除的数字\ndef _not_divisible(n):\n    return lambda x: x % n &gt; 0</pre><pre class=\"python\">#定义一个生成器，不断返回下一个素数\ndef primes():\n    yield 2\n    it = _odd_iter() # 初始序列\n    while True:\n        n = next(it) # 返回序列的第一个数\n        yield n\n        it = filter(_not_divisible(n), it) # 构造新序列</pre><pre class=\"python\"># 打印1000以内的素数:\nfor n in primes():\n    if n &lt; 1000:\n        print(n)\n    else:\n        break</pre>\n<p><br/></p>\n<h1><a href=\"http://baike.baidu.com/item/%E5%9B%9E%E6%95%B0\"><span style=\"font-size:18px;\">回数</span></a></h1>\n<p/><pre class=\"python\">def is_palindrome(n):\n\treturn str(n) == str(n)[::-1]</pre><br/>\n通过筛选功能的高阶函数打印某范围内的回数\n<p/><pre class=\"python\">output = filter(is_palindrome, range(1, 1000))\nprint(list(output))</pre><br/><br/><br/><br/><p/>\n            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"积累的python好文章",
			"content":"\n                    <div class=\"markdown_views\">\n                <h2 id=\"python教程\">Python教程</h2>\n\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\">1. 廖雪峰之Python教程</a> <br/>\n<a href=\"http://www.runoob.com/python/python-tutorial.html\">2. 菜鸟教程之Python基础</a></p>\n\n\n\n<h2 id=\"python之good-article\">Python之good article</h2>\n\n<p><a href=\"http://blog.csdn.net/imzoer/article/details/8678029\">1. Python之subprocess模块</a> <br/>\n<a href=\"https://my.oschina.net/yangyanxing/blog/176933\">2. Python之logging模块</a> <br/>\n<a href=\"http://blog.csdn.net/jhonguy/article/details/7716257\">3. Python之signal</a> <br/>\n<a href=\"http://blog.csdn.net/ghostfromheaven/article/details/8653421\">4. Python之TCPServer</a> <br/>\n<a href=\"https://my.oschina.net/u/1433482/blog/190612\">5. SocketServer 网络服务框架</a> <br/>\n<a href=\"http://andylin02.iteye.com/blog/845355\">6. Python之getopt模块</a> <br/>\n<a href=\"http://www.cnblogs.com/coser/archive/2011/12/17/2291160.html\">7. Python之struct模块</a></p>            </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/markdown_views-ea0013b516.css\"/>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"python环境安装和在eclipse中插件的使用",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                \n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<strong>目录</strong><br/>\n安装Python<br/>\npython for eclipse插件安装<br/>\n配置PyDev插件<br/>\n测试</p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<strong><span style=\"font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:#4b4b4b;font-size:13px;line-height:19px;\"><strong>python环境安装和python for eclipse插件安装</strong></span><br style=\"color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;line-height:19px;\"/><span style=\"font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:#4b4b4b;font-size:13px;line-height:19px;\">1、下载<span style=\"font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;color:#4b4b4b;font-size:13px;line-height:19px;\"><strong>python环境和</strong></span>python\n for eclipse</span><br style=\"color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;line-height:19px;\"/><a href=\"http://download.csdn.net/detail/u013378306/9388113\">python环境和python for eclipse插件下载地址</a><br/></strong></p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<strong><span style=\"line-height:1.5;\">在Windows命令行中使用Python</span></strong><br/>\n如果你想要从Windows命令行调用Python，那么需要先设置Python环境变量。</p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n对于Windows，点击控制面板-&gt;系统-&gt;高级-&gt;环境变量。在“系统变量”表单中点击叫做PATH的变量，然后编辑这个变量，把;D:\\dev\\python2.7.6加到它的结尾。当然，是Python所在的安装目录。</p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<span style=\"line-height:1.5;\">测试python环境变量是否设置成功</span></p>\n<div class=\"cnblogs_code\" style=\"background-color:rgb(245,245,245);border:1px solid rgb(204,204,204);padding:5px;overflow:auto;margin:5px 0px;font-family:'Courier New' !important;\">\n<pre style=\"margin-top:0px;margin-bottom:0px;white-space:pre-wrap;font-family:'Courier New' !important;\">C:\\Users\\jiqinlin&gt;<span style=\"line-height:1.5 !important;\">python\nPython </span>2.7.6 (default, Nov 10 2013, 19:24:24) [MSC v.1500 64<span style=\"line-height:1.5 !important;\"> bit (AMD64)] on win\n</span>32<span style=\"line-height:1.5 !important;\">\nType </span><span style=\"line-height:1.5 !important;\">\"</span><span style=\"line-height:1.5 !important;\">help</span><span style=\"line-height:1.5 !important;\">\"</span>, <span style=\"line-height:1.5 !important;\">\"</span><span style=\"line-height:1.5 !important;\">copyright</span><span style=\"line-height:1.5 !important;\">\"</span>, <span style=\"line-height:1.5 !important;\">\"</span><span style=\"line-height:1.5 !important;\">credits</span><span style=\"line-height:1.5 !important;\">\"</span> <span style=\"line-height:1.5 !important;\">or</span> <span style=\"line-height:1.5 !important;\">\"</span><span style=\"line-height:1.5 !important;\">license</span><span style=\"line-height:1.5 !important;\">\"</span> <span style=\"line-height:1.5 !important;\">for</span><span style=\"line-height:1.5 !important;\"> more information.\n</span>&gt;&gt;&gt;</pre>\n</div>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n </p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<br/></p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n2、解压pydev插件后，会发现有features、plugins两个文件夹，然后把features文件夹下的文件移到D:\\dev\\eclipse\\features目录下，把plugins文件夹下的文件移到D:\\dev\\eclipse\\plugins目录下。<br/><span style=\"line-height:1.5;\">注意：D:\\dev\\eclipse\\为eclipse安装目录</span></p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n3、重启eclipse，在windows-&gt;preferences出现PyDev配置项，表示PyDev插件安装成功。</p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<strong>配置PyDev插件</strong> <br/>\n在Window菜单中选Preference，<br/>\n1、windows-&gt;preferences-&gt;PyDev-&gt;Interpreter - Python，New一个Python解释器，填上解释器名字和路径，路径选相应的python.exe。 <br/><img src=\"http://images.cnitblog.com/i/270324/201403/041121253411960.png\" alt=\"\" style=\"border:0px;\"/></p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<img src=\"http://images.cnitblog.com/i/270324/201403/041121570921926.png\" alt=\"\" style=\"border:0px;\"/></p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n以下几步Python 3.x必选，Python 2随意。个人比较习惯Unicode，所以一次性在这儿设定了。<br/>\n2、General-&gt;Editors-&gt;Text Editors-&gt;Spelling，Encoding改成Other:UTF-8</p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n3、General-&gt;Workspace，Text file encoding改成Other:UTF-8<br/>\n至此，PyDev的配置就完成了。</p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<strong>测试</strong><br/>\nFile-&gt;New-&gt;Project，选PyDev下的PyDev Project，Grammer和Interpreter选相应的版本，Finish。 <br/><img src=\"http://images.cnitblog.com/i/270324/201403/041122115198637.png\" alt=\"\" style=\"border:0px;\"/><br/>\n在PyDev Package Explorer的项目上右键，New-&gt;PyDev Module，随便写个名字，Finish。<br/>\n然后随便写几行代码，Run在弹出的对话框中选择Python Run，OK <br/><img src=\"http://images.cnitblog.com/i/270324/201403/041122224529273.png\" alt=\"\" style=\"border:0px;\"/></p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<br/></p>\n<p style=\"line-height:19px;margin:10px auto;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n<span style=\"color:#FF0000;\">linux 下的路径</span></p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n查看 执行文件  <br/></p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\nwhich python</p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n可以看到如下路径<br/></p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n/usr/bin/python</p>\n<p style=\"line-height:19px;margin:10px auto;color:rgb(75,75,75);font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:13px;\">\n把它配在eclipse中就ok了<br/><br/><br/></p>\n            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"Python之if判断语句与while和for循环",
			"content":"\n                    <div class=\"markdown_views\">\n                <h2 id=\"python之if判断语句与while和for循环\">Python之if判断语句与while和for循环</h2>\n\n<p/><div class=\"toc\"><div class=\"toc\">\n<ul>\n<li><ul>\n<li><a href=\"https://blog.csdn.net/u012052268/article/details/60884577#python之if判断语句与while和for循环\">Python之if判断语句与while和for循环</a></li>\n</ul>\n</li>\n<li><a href=\"https://blog.csdn.net/u012052268/article/details/60884577#5-1-python之if语句\">5-1 Python之if语句</a></li>\n<li><a href=\"https://blog.csdn.net/u012052268/article/details/60884577#5-2-python之-if-else\">5-2 Python之 if-else</a></li>\n<li><a href=\"https://blog.csdn.net/u012052268/article/details/60884577#5-3-python之-if-elif-else\">5-3 Python之 if-elif-else</a></li>\n<li><a href=\"https://blog.csdn.net/u012052268/article/details/60884577#5-4-python之-for循环\">5-4 Python之 for循环</a></li>\n<li><a href=\"https://blog.csdn.net/u012052268/article/details/60884577#5-5-python之-while循环\">5-5 Python之 while循环</a></li>\n<li><a href=\"https://blog.csdn.net/u012052268/article/details/60884577#5-6-python之-break退出循环\">5-6 Python之 break退出循环</a></li>\n<li><a href=\"https://blog.csdn.net/u012052268/article/details/60884577#5-7-python之-continue继续循环\">5-7 Python之 continue继续循环</a></li>\n<li><a href=\"https://blog.csdn.net/u012052268/article/details/60884577#5-8-python之-多重循环\">5-8 Python之 多重循环</a></li>\n</ul>\n</div>\n</div>\n\n\n<h1 id=\"5-1-python之if语句\">5-1 Python之if语句</h1>\n\n<p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p>\n\n<p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，可以用<strong>if语句</strong>实现：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\">age = <span class=\"hljs-number\">20</span>\n<span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'your age is'</span>, age\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'adult'</span>\n<span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'END'</span></code></pre>\n\n<p><strong>注意</strong>: ==Python代码的缩进规则==。具有相同缩进的代码被视为代码块，上面的3，4行 print 语句就构成一个代码块（但不包括第5行的print）。如果 if 语句判断为 True，就会执行这个代码块。</p>\n\n<p>缩进请严格按照Python的习惯写法：==4个空格==，不要使用Tab，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。</p>\n\n<p>注意: if 语句后接表达式，然后用:表示代码块开始。</p>\n\n<p>如果你在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs r\">&gt;&gt;&gt; age = <span class=\"hljs-number\">20</span>\n&gt;&gt;&gt; <span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:\n<span class=\"hljs-keyword\">...</span>     print <span class=\"hljs-string\">'your age is'</span>, age\n<span class=\"hljs-keyword\">...</span>     print <span class=\"hljs-string\">'adult'</span>\n<span class=\"hljs-keyword\">...</span>\nyour age is <span class=\"hljs-number\">20</span>\nadult</code></pre>\n\n<p><strong>任务</strong></p>\n\n<p>如果成绩达到60分或以上，视为passed。</p>\n\n<p>假设Bart同学的分数是75，请用if语句判断是否能打印出 passed:</p>\n\n<p>答案：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\">score = <span class=\"hljs-number\">75</span>\n<span class=\"hljs-keyword\">if</span> score &gt;= <span class=\"hljs-number\">60</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'passed'</span></code></pre>\n\n<hr/>\n\n\n\n<h1 id=\"5-2-python之-if-else\">5-2 Python之 if-else</h1>\n\n<p>当 if 语句判断表达式的结果为 True 时，就会执行 if 包含的代码块：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\"><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'adult'</span></code></pre>\n\n<p>如果我们想判断年龄在18岁以下时，打印出 ‘teenager’，怎么办？</p>\n\n<p>方法是再写一个 if:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\"><span class=\"hljs-keyword\">if</span> age &lt; <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'teenager'</span></code></pre>\n\n<p>或者用 not 运算：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> age &gt;= <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'teenager'</span></code></pre>\n\n<p>细心的同学可以发现，这两种条件判断是“非此即彼”的，要么符合条件1，要么符合条件2，因此，完全可以用一个 if … else … 语句把它们统一起来：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\"><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'adult'</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'teenager'</span></code></pre>\n\n<p>利用 if … else … 语句，我们可以根据条件表达式的值为 True 或者 False ，分别执行 if 代码块或者 else 代码块。</p>\n\n<p>注意: else 后面有个“:”。</p>\n\n<p><strong>任务</strong></p>\n\n<p>如果成绩达到60分或以上，视为passed，否则视为failed。</p>\n\n<p>假设Bart同学的分数是55，请用if语句打印出 passed 或者 failed:</p>\n\n<p><strong>答案</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\">score = <span class=\"hljs-number\">55</span>\n<span class=\"hljs-keyword\">if</span> score &gt;= <span class=\"hljs-number\">60</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'passed'</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'failed'</span></code></pre>\n\n<hr/>\n\n\n\n<h1 id=\"5-3-python之-if-elif-else\">5-3 Python之 if-elif-else</h1>\n\n<p>有的时候，一个 if … else … 还不够用。比如，根据年龄的划分：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs \">条件1：18岁或以上：adult\n条件2：6岁或以上：teenager\n条件3：6岁以下：kid</code></pre>\n\n<p>我们可以用一个 if age &gt;= 18 判断是否符合条件1，如果不符合，再通过一个 if 判断 age &gt;= 6 来判断是否符合条件2，否则，执行条件3：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\"><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'adult'</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">6</span>:\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'teenager'</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'kid'</span></code></pre>\n\n<p>这样写出来，我们就得到了一个两层嵌套的 if … else … 语句。这个逻辑没有问题，但是，如果继续增加条件，比如3岁以下是 baby：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\"><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'adult'</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">6</span>:\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'teenager'</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'kid'</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">'baby'</span></code></pre>\n\n<p>这种缩进只会越来越多，代码也会越来越难看。</p>\n\n<p>要避免嵌套结构的 if … else …，我们可以用 if … 多个elif … else … 的结构，一次写完所有的规则：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs python\"><span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'adult'</span>\n<span class=\"hljs-keyword\">elif</span> age &gt;= <span class=\"hljs-number\">6</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'teenager'</span>\n<span class=\"hljs-keyword\">elif</span> age &gt;= <span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'kid'</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'baby'</span></code></pre>\n\n<p>elif 意思就是 else if。这样一来，我们就写出了结构非常清晰的一系列条件判断。</p>\n\n<p>特别注意: 这一系列条件判断会从上到下依次判断，如果某个判断为 True，执行完对应的代码块，后面的条件判断就直接忽略，不再执行了。</p>\n\n<p>请思考下面的代码：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs python\">age = <span class=\"hljs-number\">8</span>\n<span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">6</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'teenager'</span>\n<span class=\"hljs-keyword\">elif</span> age &gt;= <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'adult'</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'kid'</span></code></pre>\n\n<p>当 age = 8 时，结果正确，但 age = 20 时，为什么没有打印出 adult？</p>\n\n<p>如果要修复，应该如何修复？</p>\n\n<p><strong>任务</strong></p>\n\n<p>如果按照分数划定结果：</p>\n\n<pre><code>90分或以上：excellent\n\n80分或以上：good\n\n60分或以上：passed\n\n60分以下：failed\n</code></pre>\n\n<p>请编写程序根据分数打印结果。</p>\n\n<p><strong>答案</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs python\">score = <span class=\"hljs-number\">85</span>\n\n<span class=\"hljs-keyword\">if</span> score &gt;= <span class=\"hljs-number\">90</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'excellent'</span>\n<span class=\"hljs-keyword\">elif</span> score &gt;= <span class=\"hljs-number\">80</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'good'</span>\n<span class=\"hljs-keyword\">elif</span> score &gt;= <span class=\"hljs-number\">60</span>:\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'passed'</span>\n<span class=\"hljs-keyword\">else</span> :\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'failed'</span></code></pre>\n\n<hr/>\n\n\n\n<h1 id=\"5-4-python之-for循环\">5-4 Python之 for循环</h1>\n\n<p>list或tuple可以表示一个有序集合。如果我们想依次访问一个list中的每一个元素呢？比如 list：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\">L = [<span class=\"hljs-string\">'Adam'</span>, <span class=\"hljs-string\">'Lisa'</span>, <span class=\"hljs-string\">'Bart'</span>]\n<span class=\"hljs-built_in\">print</span> L[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-built_in\">print</span> L[<span class=\"hljs-number\">1</span>]\n<span class=\"hljs-built_in\">print</span> L[<span class=\"hljs-number\">2</span>]</code></pre>\n\n<p>如果list只包含几个元素，这样写还行，如果list包含1万个元素，我们就不可能写1万行print。</p>\n\n<p>这时，循环就派上用场了。</p>\n\n<p>Python的 for 循环就可以依次把list或tuple的每个元素迭代出来：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\">L = [<span class=\"hljs-string\">'Adam'</span>, <span class=\"hljs-string\">'Lisa'</span>, <span class=\"hljs-string\">'Bart'</span>]\n<span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> L:\n    <span class=\"hljs-built_in\">print</span> name</code></pre>\n\n<p>注意:  name 这个变量是在 for 循环中定义的，意思是，依次取出list中的每一个元素，并把元素赋值给 name，然后执行for循环体（就是缩进的代码块）。</p>\n\n<p>这样一来，遍历一个list或tuple就非常容易了。</p>\n\n<p><strong>任务</strong></p>\n\n<p>班里考试后，老师要统计平均成绩，已知4位同学的成绩用list表示如下：</p>\n\n<p>L = [75, 92, 59, 68]</p>\n\n<p>请利用for循环计算出平均成绩。</p>\n\n<p><strong>答案</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs livecodeserver\">L = [<span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">92</span>, <span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">68</span>]\n<span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0.0</span>\n<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-operator\">in</span> L:\n   <span class=\"hljs-built_in\">sum</span> += x\nprint <span class=\"hljs-built_in\">sum</span> / <span class=\"hljs-number\">4</span></code></pre>\n\n<hr/>\n\n\n\n<h1 id=\"5-5-python之-while循环\">5-5 Python之 while循环</h1>\n\n<p>Python之 while循环</p>\n\n<p>和 for 循环不同的另一种循环是 while 循环，while 循环不会迭代 list 或 tuple 的元素，而是根据表达式判断循环是否结束。</p>\n\n<p>比如要从 0 开始打印不大于 N 的整数：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\">N = <span class=\"hljs-number\">10</span>\nx = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">while</span> x &lt; N:\n    <span class=\"hljs-built_in\">print</span> x\n    x = x + <span class=\"hljs-number\">1</span></code></pre>\n\n<p>while循环每次先判断 x &lt; N，如果为True，则执行循环体的代码块，否则，退出循环。</p>\n\n<p>在循环体内，x = x + 1 会让 x 不断增加，最终因为 x &lt; N 不成立而退出循环。</p>\n\n<p>如果没有这一个语句<strong>，while循环在判断 x &lt; N 时总是为True</strong>，就会无限循环下去，变成死循环，所以要特别留意while循环的退出条件。</p>\n\n<p><strong>任务</strong></p>\n\n<p>利用while循环计算100以内奇数的和。</p>\n\n<p><strong>答案</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs livecodeserver\"><span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>\nx = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> x &lt;<span class=\"hljs-number\">100</span>:\n    <span class=\"hljs-built_in\">sum</span> += x\n    x += <span class=\"hljs-number\">2</span>\nprint <span class=\"hljs-built_in\">sum</span></code></pre>\n\n<hr/>\n\n\n\n<h1 id=\"5-6-python之-break退出循环\">5-6 Python之 break退出循环</h1>\n\n<p>Python之 break退出循环</p>\n\n<p>用 for 循环或者 while 循环时，如果要在循环体内直接退出循环，可以使用 break 语句。</p>\n\n<p>比如计算1至100的整数和，我们用while来实现：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs axapta\"><span class=\"hljs-keyword\">sum</span> = <span class=\"hljs-number\">0</span>\nx = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> True:\n    <span class=\"hljs-keyword\">sum</span> = <span class=\"hljs-keyword\">sum</span> + x\n    x = x + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> x &gt; <span class=\"hljs-number\">100</span>:\n        <span class=\"hljs-keyword\">break</span>\nprint <span class=\"hljs-keyword\">sum</span></code></pre>\n\n<p>咋一看， while True 就是一个死循环，但是在循环体内，我们还判断了 x &gt; 100 条件成立时，用break语句退出循环，这样也可以实现<strong>循环的结束</strong>。</p>\n\n<p><strong>任务</strong></p>\n\n<p>利用 while True 无限循环配合 break 语句，计算 1 + 2 + 4 + 8 + 16 + … 的前20项的和。</p>\n\n<p><strong>答案</strong>：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs axapta\"><span class=\"hljs-keyword\">sum</span> = <span class=\"hljs-number\">0</span>\nx = <span class=\"hljs-number\">1</span>\nn = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> True:\n    <span class=\"hljs-keyword\">sum</span> += x\n    x = x * <span class=\"hljs-number\">2</span>\n    n += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">20</span>:\n        <span class=\"hljs-keyword\">break</span>\nprint <span class=\"hljs-keyword\">sum</span></code></pre>\n\n<hr/>\n\n\n\n<h1 id=\"5-7-python之-continue继续循环\">5-7 Python之 continue继续循环</h1>\n\n<p>Python之 continue继续循环</p>\n\n<p>在循环过程中，可以用<strong>break</strong>退出当前循环，还可以用<strong>continue</strong>跳过后续循环代码，继续下一次循环。</p>\n\n<p>假设我们已经写好了利用for循环计算平均分的代码：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs livecodeserver\">L = [<span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">81</span>, <span class=\"hljs-number\">66</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">69</span>, <span class=\"hljs-number\">85</span>]\n<span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0.0</span>\nn = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-operator\">in</span> L:\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">sum</span> + x\n    n = n + <span class=\"hljs-number\">1</span>\nprint <span class=\"hljs-built_in\">sum</span> / n</code></pre>\n\n<p>现在老师只想统计及格分数的平均分，就要把 x &lt; 60 的分数剔除掉，这时，利用 continue，可以做到当 x &lt; 60的时候，不继续执行循环体的后续代码，直接进入下一次循环：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs livecodeserver\"><span class=\"hljs-keyword\">for</span> x <span class=\"hljs-operator\">in</span> L:\n    <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">60</span>:\n        continue\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">sum</span> + x\n    n = n + <span class=\"hljs-number\">1</span></code></pre>\n\n<p><strong>任务</strong></p>\n\n<p>对已有的计算 0 - 100 的while循环进行改造，通过增加 continue 语句，使得只计算奇数的和：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs axapta\"><span class=\"hljs-keyword\">sum</span> = <span class=\"hljs-number\">0</span>\nx = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">while</span> True:\n    <span class=\"hljs-keyword\">sum</span> = <span class=\"hljs-keyword\">sum</span> + x\n    x = x + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> x &gt; <span class=\"hljs-number\">100</span>:\n        <span class=\"hljs-keyword\">break</span>\nprint <span class=\"hljs-keyword\">sum</span></code></pre>\n\n<p><strong>答案</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs axapta\"><span class=\"hljs-keyword\">sum</span> = <span class=\"hljs-number\">0</span>\nx = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">while</span> True:\n    x = x + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> x &gt; <span class=\"hljs-number\">100</span>:\n        <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">continue</span>\n    <span class=\"hljs-keyword\">sum</span> += x\nprint <span class=\"hljs-keyword\">sum</span></code></pre>\n\n<hr/>\n\n\n\n<h1 id=\"5-8-python之-多重循环\">5-8 Python之 多重循环</h1>\n\n<p>Python之 多重循环</p>\n\n<p>在循环内部，还可以嵌套循环，我们来看一个例子：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\"><span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span>]:\n    <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'2'</span>, <span class=\"hljs-string\">'3'</span>]:\n        <span class=\"hljs-built_in\">print</span> x + y</code></pre>\n\n<p>x 每循环一次，y 就会循环 3 次，这样，我们可以打印出一个全排列：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs \">A1\nA2\nA3\nB1\nB2\nB3\nC1\nC2\nC3</code></pre>\n\n<p><strong>任务</strong></p>\n\n<p>对100以内的两位数，请使用一个两重循环打印出所有十位数数字比个位数数字小的数，例如，23（2 &lt; 3）。</p>\n\n<p><strong>答案</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\"><span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>]:\n    <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>]:\n        <span class=\"hljs-keyword\">if</span> x &lt; y:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-number\">10</span> * x + y)</code></pre>\n\n<hr/>            </div>\n            <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/markdown_views-ea0013b516.css\"/>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"python爬虫",
			"content":"\n                    <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/phoenix/template/css/htmledit_views-0a60691e80.css\"/>\n            <div class=\"htmledit_views\">\n                \n编写第一个python爬虫python爬虫python爬虫python爬虫\n            </div>\n                ",
			"keywords":["programing"]
		},
		{

			"title":"linux升级py3,安装pip,svn",
			"content":"【查看当前linux下python版本】\n[root@localhost /]# python --version\nPython 2.6.6\n\n【想要查看ubuntu中安装的Python路径】\n\n【1.whereis python】：\n[root@localhost /]# whereis python\npython: /usr/bin/python /usr/bin/python2.6 /usr/lib/python2.6 /usr/lib64/python2.6 /usr/include/python2.6 /usr/share/man/man1/python.1.gz\n\n【2.which python】：\n[root@localhost /]# which python\n/usr/bin/python\n\n\n------------------------------------------------------------------------------------------------------------------------------------------\n\n【Linux下python安装升级详细步骤 | Python2 升级 Python3】\n\ncd usr/local    #切换下载目录\n\nwget http://www.python.org/ftp/python/3.3.0/Python-3.3.0.tgz        #首先下载源tar包\n\ntar -xzvf Python-3.3.0.tgz                                            #下载完成后到下载目录下，解压\n\ncd Python-3.3.0　                                                    #进入解压缩后的文件夹\n\nmkdir /usr/local/python3                                            #在编译前先在/usr/local建一个文件夹python3（作为python的安装路径，以免覆盖老的版本）\n\n./configure --prefix=/usr/local/python3                                #配置python路径，开始编译安装\n\nmake\n\nmake install\n\nmv /usr/bin/python /usr/bin/python_old2                                #此时没有覆盖老版本，再将原来/usr/bin/python链接改为别的名字\n\nln -s /usr/local/python3/bin/python3/ usr/bin/python                    #再建立新版本python的链接\n\npython -V        #这个时候输入\n\n[root@localhost Python-3.3.0]# ln -s /usr/local/python3/bin/python3 /usr/bin/python\n[root@localhost Python-3.3.0]# ls\nbuild         config.status  configure.ac  Include     libpython3.3m.a  Makefile         Misc     Parser   pybuilddir.txt  python         README\nconfig.guess  config.sub     Doc           install-sh  LICENSE          Makefile.pre     Modules  PC       pyconfig.h      Python         setup.py\nconfig.log    configure      Grammar       Lib         Mac              Makefile.pre.in  Objects  PCbuild  pyconfig.h.in   python-gdb.py  Tools\n[root@localhost Python-3.3.0]# python -V\nPython 3.3.0\n\n\n\n\n最后扩充下，\n\n这种方法虽然能安装成功，但是它带来了新的问题，比如yum不能正常用了\n\n修改/usr/bin/yum的第一行为：\n\n#!/usr/bin/python_old2\n\n就可以了\n\n------------------------------------------------------------------------------------------------------------------------------------------\n\n安装pip以及setuptools\n\n【安装setuptools】\n\nwget --no-check-certificate  https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26\n\ntar -zxvf setuptools-19.6.tar.gz\n\ncd setuptools-19.6\n\npython setup.py build\n\npython setup.py install\n\n【安装pip】\n\nwget --no-check-certificate  https://pypi.python.org/packages/source/p/pip/pip-8.0.2.tar.gz#md5=3a73c4188f8dbad6a1e6f6d44d117eeb\n\ntar -zxvf pip-8.0.2.tar.gz\n\ncd pip-8.0.2\n\npython setup.py build\n\npython setup.py install\n\npython -m pip install paramiko\n\npython -m pip install line_profiler\n\n------------------------------------------------------------------------------------------------------------------------------------------\n\n安装svn服务\n(1)yum install subversion        #安装svn\n\n(2)cd /data/wwwroot            #切换目录\n\n(3)mkdir svnsata                #创建svn仓库\n[root@localhost wwwroot]# cd /data/wwwroot\n[root@localhost wwwroot]# ls\ndefault\n[root@localhost wwwroot]# mkdir svndata\n\n(4)svnadmin create svndata\n[root@localhost wwwroot]# ls svndata/\nconf  db  format  hooks  locks  README.txt\n\n(5)cd svn/conf\n[root@localhost svndata]# cd svn/conf\n[root@localhost conf]# ls\nauthz  passwd  svnserve.conf\n\nauthz 是权限控制文件\npasswd 是帐号密码文件\nsvnserve.conf 是SVN服务配置文件\n\n(6)vi passwd     #建立了两个用户，test1，test2\n[users]\n# harry = harryssecret\n# sally = sallyssecret\ntest1=123456\ntest2=123456\n\n(7)vi authz     #编辑权限\n[/]\nliuxianan=rw\ntest1=r\ntest2=r\n*=\n\n(8)vi svnserve.conf\n\n打开下面的5个注释\nanon-access = read #匿名用户可读\nauth-access = write #授权用户可写\npassword-db = passwd #使用哪个文件作为账号文件\nauthz-db = authz #使用哪个文件作为权限文件\nrealm = /home/svn # 认证空间名，版本库所在目录\n\n[general]\n### These options control access to the repository for unauthenticated\n### and authenticated users.  Valid values are \"write\", \"read\",\n### and \"none\".  The sample settings below are the defaults.\nanon-access = read\nauth-access = write\n### The password-db option controls the location of the password\n### database file.  Unless you specify a path starting with a /,\n### the file's location is relative to the directory containing\n### this configuration file.\n### If SASL is enabled (see below), this file will NOT be used.\n### Uncomment the line below to use the default password file.\npassword-db = passwd\n### The authz-db option controls the location of the authorization\n### rules for path-based access control.  Unless you specify a path\n### starting with a /, the file's location is relative to the the\n### directory containing this file.  If you don't specify an\n### authz-db, no path-based access control is done.\n### Uncomment the line below to use the default authorization file.\nauthz-db = authz\n### This option specifies the authentication realm of the repository.\n### If two repositories have the same authentication realm, they should\n### have the same password database, and vice versa.  The default realm\n### is repository's uuid.\n#realm = My First Repository\nrealm = /data/wwwroot/svndata\n\n\n(9)svnserve -d -r /data/wwwroot/svndata            #启动svn\n报错：    端口号已被占用\n[root@localhost conf]# svnserve -d -r /data/wwwroot/svndata\nsvnserve: Can't bind server socket: Address already in use\n解决：\n[root@localhost conf]# netstat -antp\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name\ntcp        0      0 0.0.0.0:21                  0.0.0.0:*                   LISTEN      3015/pure-ftpd\ntcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      1879/sshd\ntcp        0      0 127.0.0.1:88                0.0.0.0:*                   LISTEN      2931/httpd\n-------------------------------------------------------------------------------------------------------------\n【  tcp        0      0 0.0.0.0:3690                0.0.0.0:*                   LISTEN      27561/svnserve  】\n-------------------------------------------------------------------------------------------------------------\ntcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      4589/mysqld\ntcp        0      0 127.0.0.1:11211             0.0.0.0:*                   LISTEN      1857/memcached\ntcp        0      0 127.0.0.1:6379              0.0.0.0:*                   LISTEN      1845/redis-server 1\ntcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      3006/nginx\ntcp        1      0 192.168.164.135:17100       117.103.182.194:80          CLOSE_WAIT  3538/clock-applet\ntcp        0      0 :::21                       :::*                        LISTEN      3015/pure-ftpd\ntcp        0      0 :::22                       :::*                        LISTEN      1879/sshd\ntcp        0      0 ::ffff:127.0.0.1:8006       :::*                        LISTEN      3065/java\ntcp        0      0 :::8080                     :::*                        LISTEN      3065/java\n\n\n更换svn服务监听端口号\nsvnserve -d -r /data/wwwroot/svndata --listen-port 3689\n\n仍然报错····\nkill PID\n\n[root@localhost conf]# kill 27915\n[root@localhost conf]# svnserve -d -r /data/wwwroot/svndata\nsvnserve: Can't bind server socket: Address already in use\n[root@localhost conf]# netstat -antp\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name\ntcp        0      0 0.0.0.0:21                  0.0.0.0:*                   LISTEN      3015/pure-ftpd\ntcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      1879/sshd\ntcp        0      0 127.0.0.1:88                0.0.0.0:*                   LISTEN      2931/httpd\ntcp        0      0 0.0.0.0:3689                0.0.0.0:*                   LISTEN      27915/svnserve\ntcp        0      0 0.0.0.0:3690                0.0.0.0:*                   LISTEN      27561/svnserve\ntcp        0      0 0.0.0.0:3306                0.0.0.0:*                   LISTEN      4589/mysqld\ntcp        0      0 127.0.0.1:11211             0.0.0.0:*                   LISTEN      1857/memcached\ntcp        0      0 127.0.0.1:6379              0.0.0.0:*                   LISTEN      1845/redis-server 1\ntcp        0      0 0.0.0.0:80                  0.0.0.0:*                   LISTEN      3006/nginx\ntcp        1      0 192.168.164.135:17100       117.103.182.194:80          CLOSE_WAIT  3538/clock-applet\ntcp        0      0 :::21                       :::*                        LISTEN      3015/pure-ftpd\ntcp        0      0 :::22                       :::*                        LISTEN      1879/sshd\ntcp        0      0 ::ffff:127.0.0.1:8006       :::*                        LISTEN      3065/java\ntcp        0      0 :::8080                     :::*                        LISTEN      3065/java\n[root@localhost conf]# kill 27561\n[root@localhost conf]# kill 27915\n[root@localhost conf]# svnserve -d -r /data/wwwroot/svndata\n[root@localhost conf]#\n\n\n重新开启svn服务\nsvnserve -d -r /data/wwwroot/svndata/\n\n正常\n[root@localhost conf]# cd ../\n[root@localhost svndata]# ls\nconf  db  format  hooks  locks  README.txt  test\n[root@localhost svndata]# svn list svn://127.0.0.1:3690\ntestsetset.txt\n\nsvn list svn://192.168.164.135:3690\n\n(10)killall svnserve                            #停止svn\n\nsvn://ip/njlrxx\n\n\nsvn://192.168.164.135/data/wwwroot/svndata",
			"keywords":["programing"]
		},
		{

			"title":"python常用模块part1",
			"content":"1. sys模块\nsys模块包括了一组非常实用的服务，内含很多函数方法和变量，用来处理Python运行时配置以及资源，从而可以与前当程序之外的系统环境交互\n1.1 sys.argv 在外部向程序传递参数\nsys.argv[number]\n一般情况下，number为0是这个脚本的名字，1，2…则为命令行下传递的参数\n示例（在D:\\github\\pycharmDevelopment有一个名字为classoop.py的python文件）\nimport sys def testSys(): print(sys.argv[0]) print('The first arg is: ', sys.argv[1]) print('The second arg is: ', sys.argv[2]) testSys()\nD:\\github\\pycharmDevelopment>python classoop.py halo hi File name is: classoop.py The first arg is: halo The second arg is: hi\n1.2 sys.platform平台查看\n>>> sys.platform 'win32'\n1.3 sys.path 查看python路径\n我们在执行import module_name的时候，python内部发生了什么呢？简单的说，就是搜索module_name。根据sys.path的路径来搜索module.name\n>>> sys.path ['', 'E:\\\\python35\\\\python35.zip', 'E:\\\\python35\\\\DLLs', 'E:\\\\python35\\\\lib', 'E :\\\\python35', 'E:\\\\python35\\\\lib\\\\site-packages', 'E:\\\\python35\\\\lib\\\\site-packa ges\\\\setuptools-27.3.0-py3.5.egg']\n大家以后写好的模块就可以放到上面的某一个目录下，便可以正确搜索到了。当然大家也可以添加自己的模块路径。Sys.path.append(“mine module path”).\n1.4 sys.stdin,sys.stdout,sys.stderr\nstdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象. 如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device ), 或者以非标准的方式处理它们\n1.5 sys.builtin_module_names\nsys.builtin_module_names返回一个列表，包含内建模块的名字\n1.6 sys.exit(n)\n调用sys.exit(n)可以中途退出程序，当参数非0时，会引发一个SystemExit异常，从而可以在主程序中捕获该异常。\n1.7 sys.version字符串给你提供安装的Python的版本信息。sys.version_info元组则提供一个更简单的方法来使你的程序具备Python版本要求功能。\n>>> sys.version '3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)]' >>> sys.version_info sys.version_info(major=3, minor=5, micro=2, releaselevel='final', serial=0) >>>\n1.8 sys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。\nsys.setdefaultencoding(): 设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，可以先执行reload(sys)，在执行 setdefaultencoding(‘utf8’)，此时将系统默认编码设置为utf8。（见设置系统默认编码 ）\nsys.getfilesystemencoding(): 获取文件系统使用编码方式，Windows下返回’mbcs’，mac下返回’utf-8’.\n>>> sys.getdefaultencoding() 'utf-8' >>> sys.getfilesystemencoding() 'mbcs'\n2. json 模块\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。\n数据格式可以简单地理解为键值对的集合（A collection of name/value pairs）。不同的语言中，它被理解为对象（object），纪录（record），结构（struct），字典（dictionary），哈希表（hash table），有键列表（keyed list），或者关联数组 （associative array）。\n值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。\n2.1 json.dumps()\ndump的功能就是把Python对象encode为json对象，一个编码过程。注意json模块提供了json.dumps和json.dump方法，区别是dump直接到文件，而dumps到一个字符串，这里的s可以理解为string。\n>>>data = [ { 'a':'A', 'b':(2, 4), 'c':3 } ] >>>print('data:', repr(data)) >>>data: [{'c': 3, 'b': (2, 4), 'a': 'A'}] >>>data_string = json.dumps(data) >>>print('json:', data_string) json: [{\"c\": 3, \"b\": [2, 4], \"a\": \"A\"}] >>>type(data) <class 'list'> >>>type(data_string) <class 'str'>\n2.2 json.dump()\n不仅可以把Python对象编码为string，还可以写入文件。因为我们不能把Python对象直接写入文件，这样会报错TypeError: expected a string or other character buffer object，我们需要将其序列化之后才可以。\nwith open('json-dump.json','w') as fp: json.dump(data,fp)\n2.3 json.loads()\n从Python内置对象dump为json对象我们知道如何操作了，那如何从json对象decode解码为Python可以识别的对象呢？是的用json.loads方法，当然这个是基于string的，如果是文件，我们可以用json.load方法。\ndecoded_json = json.loads(data_string)\n2.4 json.load()\n可以直接load文件。\nwith open('output.json') as fp: print type(fp) loaded_json = json.load(fp)\n3 pickle模块(和json模块作对比)\n可能用到的方法有以下：\n'bytes_types', 'codecs', 'compatible_formats', 'decode_long', 'dispatch_table', 'dump', 'dumps', 'encode_long', 'format_version', 'io', 'islice', 'load', 'loads', 'maxsize', 'pack', 're', 'sys', 'unpack', 'whichmodule'\n3.1 dumps(object) 返回一个字符串，它包含一个 pickle 格式的对象； loads(string) 返回包含在 pickle 字符串中的对象； dump(object, file) 将对象写到文件，这个文件可以是实际的物理文件，但也可以是任何类似于文件的对象，这个对象具有 write() 方法，可以接受单个的字符串参数； load(file) 返回包含在 pickle 文件中的对象。\n缺省情况下， dumps() 和 dump() 使用可打印的 ASCII 表示来创建 pickle。两者都有一个 final 参数（可选），如果为 True ，则该参数指定用更快以及更小的二进制表示来创建 pickle。 loads() 和 load() 函数自动检测 pickle 是二进制格式还是文本格式。\n>>>data_string = pickle.dumps(data) >>>type(data_string) >>><class 'bytes'> >>>data = pickle.loads(data_string) >>>type(data) >>><class 'list'>\n使用二进制 pickle 格式不会在节省空间上显示出太大的效率。然而，在实际使用复杂对象的系统中，您会看到，使用二进制格式可以在大小和速度方面带来显著的改进。\n3.2 dump() 和 load()\n使用文件和类似文件的对象。这些函数的操作非常类似于我们刚才所看到的 dumps() 和 loads() ，区别在于它们还有另一种能力 — dump() 函数能一个接着一个地将几个对象转储到同一个文件。随后调用 load() 来以同样的顺序检索这些对象。\n>>>fo = open('halo.txt','wb') >>>pickle.dump(data,fo,True) >>>fo.close() >>>fo1 = open('halo.txt','rb') >>>load = pickle.load(fo1) >>>load [{'c': 3, 'b': (2, 4), 'a': 'A'}] >>>type(fo1) <class '_io.BufferedReader'>\n3.3 检索所支持的格式\n>>>pickle.format_version '4.0' >>>pickle.compatible_formats ['1.0', '1.1', '1.2', '1.3', '2.0', '3.0', '4.0']\npickle的基本功能如上，但是其还有很多高阶用法如对象引用的维护，循环引用和递归引用等。\n4. shutil\n高级的 文件、文件夹、压缩包 处理模块\nshutil被定义为Python中的一个高级的文件操作模块,拥有比os模块中更强大的函数，可能用到的方法有以下：\n'chown', 'collections', 'copy', 'copy2', 'copyfile', 'copyfileobj', 'copymode', 'copystat', 'copytree', 'disk_usage', 'errno', 'fnmatch', 'get_archive_formats', 'get_terminal_size', 'get_unpack_formats', 'getgrnam', 'getpwnam', 'ignore_patterns', 'make_archive', 'move', 'nt', 'os', 'register_archive_format', 'register_unpack_format', 'rmtree', 'stat', 'sys', 'tarfile', 'unpack_archive', 'unregister_archive_format', 'unregister_unpack_format', 'which']\n4.1 copy()\nchutil.copy(source, destination)\nshutil.copy() 函数实现文件复制功能，将 source 文件复制到 destination 文件夹中，两个参数都是字符串格式。如果 destination 是一个文件名称，那么它会被用来当作复制后的文件名称，即等于 复制 + 重命名。\ncopy2()\ncopy2()工作类似copy()，不过复制到新文件的元数据会包含访问和修改时间。\n4.2 copyfile()\ncopyfile()将源的内容复制给目标，如果没有权限写目标文件则产生IoError\ncopyfile()实际是使用了底层函数copyfileobj()。copyfile()的参数是文件名，copyfileobj()的参数是打开的文件句柄。第三个参数可选，用于读入块的缓冲区长度。\n4.3 copymode() 复制文件元数据\n在UNIX创建一个新文件，会根据当前用户的umask接受权限。要把权限从一个文件复制到另一个文件，可以使用copymode()。\n要复制其他元数据，可以使用copystat()。\n使用copystat()只会复制与文件关联的权限和日期。\n4.4 copytree()处理目录树\nshutil包含三个函数处理目录树。要把一个目录从一个位置复制到另一个位置，使用copytree()。这会递归遍历源目录树，将文件复制到目标。\ncopytree()可以将当前这个实现当作起点，在使用前要让它更健壮，可以增加一些特性，如进度条。\nsymlinks参数控制着符号链接作为链接复制还是文件复制。默认将内容复制到新文件，如果选项为true，会在目标中创建新的符号链接。\n4.5 rmtree()\n要删除一个目录及其内容，可以使用rmtree()。\n4.6 move()\n将一个文件或目录从一个位置移动到另一个位置，可以使用move()。\n4.7 shutil.make_archive(base_name, format, …)\n创建压缩包并返回文件路径，例如： zip、tar base_name: 压缩包的文件名，也可以是压缩包的路径。文件名是保存到当前路径，路径时保存到指定路径 format: 压缩包种类， zip, tar, bztar, gztar root_dir: 要压缩的文件夹路径（默认当前目录） owner: 用户， 默认当前用户 group: 组，默认当前组 logger: 用户于记录日志，通常是logging.Logger对象\n#将当前目录打包放到当前目录下 ret = shutil.make_archive('dq', 'gztar')\n#将指定目录打包放到当前目录 root_dir = 'D:/temp/python/zuoye/day6' ret = shutil.make_archive('dq', 'gztar', root_dir=rootdir)\n5. random\n除了随机数的生成外，random模块还有很多用处，以下为可能用到的方法：\n'betavariate', 'choice', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'lognormvariate', 'normalvariate', 'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate'\n5.1 random.random()：返回[0.0,1)之间的浮点数\n>>>import random >>>random.random() 0.265150807792064\n5.2 random.uniform(a, b):返回[a,b]之间的浮点数\n5.3 random.randint(a, b):返回[a,b]之间的整数\n5.4 random.randrange([start], stop[, step]):从指定范围内，按指定基数递增的\nrandom.randrange(10, 100, 2)在结果上与 random.choice(range(10, 100, 2) 等效。\n5.5 random.choice(sequence)。参数sequence表示一个有序类型。这里要说明一下：sequence在python不是一种特定的类型，而是泛指一系列的类型。list, tuple, 字符串都属于sequence。\n5.6 random.shuffle(x[, random])，用于将一个列表中的元素打乱\n5.7 random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列。\nslice = random.sample(list, 5) #从list中随机获取5个元素，作为一个片断返回",
			"keywords":["programing"]
		},
		{

			"title":"python学习网址以及笔记",
			"content":"python学习网址 点击打开链接   http://www.runoob.com/python/python-dictionary.html\n主要内容有\nPython 基础教程\nPython 基础教程Python 简介Python 环境搭建Python 中文编码Python 基础语法Python 变量类型Python 运算符Python 条件语句Python 循环语句Python While循环语句Python for 循环语句Python 循环嵌套Python break 语句Python continue 语句Python pass 语句Python Number(数字)Python 字符串Python 列表(List)Python 元组Python 字典(Dictionary)Python 日期和时间Python 函数Python 模块Python 文件I/OPython File 方法Python 异常处理\n\nPython 高级教程\nPython 面向对象Python正则表达式Python CGI编程Python MySQLPython 网络编程Python SMTPPython 多线程Python XML解析python GUI编程(Tkinter)Python2.x与3 .x版本区别Python IDEPython JSONPython 100例",
			"keywords":["programing"]
		},
		{

			"title":"python 模块",
			"content":"Python 模块\nPython 模块(Module)，是一个以 .py 结尾的 Python 文件，包含了 Python 对象或者函数定义以及Python语句。\n模块让你能够有逻辑地组织你的 Python 代码段。 把相关的代码分配到一个模块里能让你的代码更好用，更易懂。 模块能定义函数，类和变量，模块里也能包含可执行的代码。\n模块的引入\n1. import 语句\n模块定义好后，我们可以使用 import 语句来引入模块，语法如下：\nimport module1[, module2[,... moduleN] #有以上语法可知，一次可以引入多个模块\n如果要引用模块，必须在文件最开始的地方用 import module 来引入。在调用模块中的函数时，必须这样引用：\n模块名.函数名\n当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。\n比如我们有一个模块命名为is_prime.py\n# -*- coding: UTF-8 -*- ''' Created on 2017-08-29 @author: Lockey ''' from math import sqrt def ifprime(n): if n == 1: return False for i in (2,sqrt(n)+1): if n%i == 0: return False return True\n搜索路径是一个解释器会先进行搜索的所有目录的列表。如想要导入模块 is_prime.py，需要把命令放在脚本的顶端：\n# -*- coding: UTF-8 -*- ''' Created on 2017-08-29 @author: Lockey ''' import is_prime # 导入模块 def plusTo(): counts = 0 n = input('Please input max number of list: ') def recur(arg): nonlocal counts for j in range(arg,int(n)+1): if arg+j == int(n) and is_prime.ifprime(j) == True: counts = counts + 1 else: pass ntoNumber = int(n) for i in range(2,ntoNumber+1): if is_prime.ifprime(i) == True and i >= 3: # 现在可以调用模块里包含的函数了 lst = [] lst.append(i) recur(i) print(counts)\n注意：一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。\n2. from…import 语句\nPython 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：\nfrom modname import name1[, name2[, ... nameN]]\n例如，要导入模块 is_prime 的 ifprime 函数，使用如下语句：\nfrom is_prime import ifprime\n这个声明不会把整个 is_prime 模块导入到当前的命名空间中，它只会将is_prime里的 ifprime 单个引入到执行这个声明的模块的全局符号表。\n现在我们在is_prime 模块中定义另外一个函数\ndef another(): for i in range(1,6): print(i)\n\n由上图可以看出如果我们只是引入了模块中的一个函数，对于没有引入的函数进行调用就会出错,我们可以通过指明要导入的模块中的函数或者类，也可以通过下面的方法来解决这个问题\n3. from…import * 语句\n把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：\nfrom modname import *\n这提供了一个简单的方法来导入一个模块中的所有项目。然而这种声明不该被过多地使用。\n例如我们想一次性引入 is_prime 模块中所有的东西，语句如下：\nfrom is_prime import *\n\n4. 搜索路径\n当你导入一个模块，Python 解析器对模块位置的搜索顺序是：\n1、当前目录 2、如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。 3、如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。\n模块搜索路径存储在 system 模块的 sys.path 变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。\n5. PYTHONPATH 变量\n作为环境变量，PYTHONPATH 由装在一个列表里的许多目录组成。PYTHONPATH 的语法和 shell 变量 PATH 的一样。\n在 Windows 系统，典型的 PYTHONPATH 如下：\nset PYTHONPATH=c:\\python27\\lib;\n在 UNIX 系统，典型的 PYTHONPATH 如下：\nset PYTHONPATH=/usr/local/lib/python\n6. dir()函数\ndir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。\n返回的列表容纳了在一个模块里定义的所有模块，变量和函数。如下一个简单的实例：\n\n7. reload() 函数\n当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。\n因此，如果你想重新执行模块里顶层部分的代码，可以用 reload() 函数。该函数会重新导入之前导入过的模块。语法如下：\nreload(module_name)\n在这里，module_name要直接放模块的名字，而不是一个字符串形式。比如想重载 is_prime 模块，如下：\nreload(is_prime)\n8. Python中的包\n包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。\n简单来说，包就是文件夹，但该文件夹下必须存在 init.py 文件, 该文件的内容可以为空。int.py用于标识当前文件夹是一个包。\n考虑一个在 package_lockey 目录下的 lockey1.py、lockey2.py、init.py 文件，test.py 为测试调用包的代码，目录结构如下：\ntest.py package_lockey |-- __init__.py |-- lockey1.py |-- lockey2.py\n源代码如下：\npackage_lockey/lockey1.py\n#!/usr/bin/python # -*- coding: UTF-8 -*- def lockey(): print \"I'm in lockey1\"\npackage_lockey/lockey2.py\n#!/usr/bin/python # -*- coding: UTF-8 -*- deflockey2(): print \"I'm in lockey2\"\n现在，在 package_lockey 目录下创建 init.py：\npackage_lockey/init.py\n#!/usr/bin/python # -*- coding: UTF-8 -*- if __name__ == '__main__': print '作为主程序运行' else: print 'package_lockey 初始化'\n然后我们在 package_lockey 同级目录下创建 test.py 来调用 package_lockey 包\ntest.py\n#!/usr/bin/python # -*- coding: UTF-8 -*- # 导入 Phone 包 from package_lockey.lockey1 import lockey1 from package_lockey.lockey2 import lockey2 lockey1() lockey2()\n以上实例输出结果：\npackage_lockey 初始化 I'm in lockey1 I'm in lockey2\n如上，为了举例，我们只在每个文件里放置了一个函数，但其实你可以放置许多函数。你也可以在这些文件里定义Python的类，然后为这些类建一个包。",
			"keywords":["programing"]
		}
	]
}
